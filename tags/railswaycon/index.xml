<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Railswaycon on Leonardo Borges</title>
    <link>http://leonardoborges.com/tags/railswaycon/</link>
    <description>Recent content in Railswaycon on Leonardo Borges</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 May 2009 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://leonardoborges.com/tags/railswaycon/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>railswaycon jruby internals by ola bini</title>
      <link>http://leonardoborges.com/writings/2009/05/29/railswaycon-jruby-internals-by-ola-bini/</link>
      <pubDate>Fri, 29 May 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/05/29/railswaycon-jruby-internals-by-ola-bini/</guid>
      <description>&lt;p&gt;&#xA;As always I expected a good talk from Ola and once more he delivered it. But this one was different. It might have been even boring to some ruby developers since we saw a fair amount of java code in this presentation. Ola gave us a tour through the main classes that make JRuby possible with a single purpose: so we can check out the code and hack ourselves. You can download his slides &lt;a href=&#34;http://olabini.com/presentations/JRubyInternals.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;If you&#39;ve been following both JRuby and Ola Bini for the past year or so, you&#39;ve noticed the trend and evolution of this alternative - and so far the most complete one - implementation of the ruby language. Specially at conferences.&lt;br&gt;&lt;br&gt;Last year at QCon London, Ola was also talking about JRuby. At Euruko &#39;08, in Prague, &lt;a href=&#34;http://blog.headius.com/&#34; target=&#34;_blank&#34;&gt;Charles Nutter&lt;/a&gt; also talked about it. RailsConf in Berlin also had its share. What all these talks had in common is that they talked about JRuby from a user/developer point of view. They were selling the solution. Convincing people to use it and presenting successful use cases.&lt;br&gt;&lt;br&gt;And as the trend goes on, JRuby is now faced as a true alternative - one that we, btw, believe here at the company as we&#39;re &lt;strong&gt;actively using it&lt;/strong&gt; - and it seems that now the call is for help. Help to make JRuby an even more complete and overall better ruby implementation. Charles&#39; &lt;a href=&#34;http://blog.headius.com/2009/05/help-jruby-by-fixing-rubyspecs.html&#34;&gt;call for help&lt;/a&gt; was a great step. As he states, it&#39;s a good way to get your feet wet. I answered the call and am hacking JRuby myself, having already submitted a couple of patches. Perhaps this was the reason for which I enjoyed the talk the  most. I was already familiar with some of the structure and classes in JRuby.&lt;br&gt;&lt;br&gt;There were 2 more talks about JRuby: &lt;strong&gt;The Pleasure and Pain of Migrating to jRuby&lt;/strong&gt;, by &lt;a href=&#34;http://twitter.com/stevenbristol&#34; target=&#34;_blank&#34;&gt;Steven Bristol&lt;/a&gt; and &lt;strong&gt;Integrating Enterprise Java with JRuby and Rails&lt;/strong&gt;, &lt;a href=&#34;http://twitter.com/malagant&#34; target=&#34;_blank&#34;&gt;Michael Johann&lt;/a&gt;. Unfortunately only the first one was a real case experience, where Steven walked through the problems he faced integrating JRuby with an existing java project. Interesting insights.&lt;br&gt;&lt;br&gt;Michael Johann basically presented a short tutorial on how to integrate rails with EJB3 which, albeit interesting, failed to address issues faced on real life projects, like dependency management. Issues which we have already addressed in a very cool way here and I plan to share it soon. Still deciding how though...&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
