<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DSL on Leonardo Borges</title>
    <link>http://leonardoborges.com/tags/dsl/</link>
    <description>Recent content in DSL on Leonardo Borges</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Mar 2008 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://leonardoborges.com/tags/dsl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qcon 2008 domain specific languages</title>
      <link>http://leonardoborges.com/writings/2008/03/10/qcon-2008-domain-specific-languages/</link>
      <pubDate>Mon, 10 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/03/10/qcon-2008-domain-specific-languages/</guid>
      <description>&lt;p&gt;&#xA;Today was the first day of the conference and it started with a tutorial about DSL&#39;s with &lt;a href=&#34;http://www.martinfowler.com&#34;&gt;Martin Fowler&lt;/a&gt;, &lt;a href=&#34;http://www.nealford.com/&#34;&gt;Neal Ford&lt;/a&gt; and Rebecca Parsons. We also had as attendants &lt;a href=&#34;http://ola-bini.blogspot.com/&#34;&gt;Ola Bini&lt;/a&gt;, core developer of JRuby, and others. My expectations were pretty high and the presentation didn&#39;t let me down. I&#39;ll try to put here toghether my impressions and some notes I took while I was there.&lt;br&gt;&lt;br&gt;Marting Fowler started discussing what DSL&#39;s are and giving some examples that many of us use in our day to day Job. Like the XML configuration files in the Java world. It is a kind of DSL, it has it&#39;s own keywords and syntax in order to express some information that will be used , for instance, to configure an underlying framework.&lt;br&gt;&lt;br&gt;The problem with XML is that it becomes hard to see the overall behavior behind it. It&#39;s not very fluent to understand the purpose of an XML file just by looking at it for the first time. There is too much &#34;noise&#34;. Things that get into the way of the readability. - &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt; files are an much more readable alternatives to XML.&lt;br&gt;&lt;br&gt;The same happens with a standard framework api code.  Let&#39;s take for instance a sample API configuration code written in Java to tackle the domain of hotel reservations. A framework like this could have the following implementation:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;HotelService hotelService = new HotelService();&lt;br&gt;PersonService personService = new HotelService();&lt;/code&gt;&lt;br&gt;&lt;br&gt;Hotel hotel = hotelService.findById(1);&lt;br&gt;Person guest = personService.findById(10) ;&lt;br&gt;&lt;br&gt;Reservation reservation = new Reservation() ;&lt;br&gt;reservation.setFrom(&#34;2008-03-10&#34;) ;&lt;br&gt;reservation.setTo(&#34;2008-03-14&#34;);&lt;br&gt;reservation.setGuests(new Person[]{guest});&lt;br&gt;&lt;br&gt;hotelService.book(hotel, reservation);&lt;br&gt;Of course implementations of this simple example may vary but we can see here some of the readability problems. One approach we could use for that is to develop a Fluent Interface to wrap this API. This was one of the techniques explored during the tutorial and the actual fluent interface could now look somewhat similar with this:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;new Hotel(1)&lt;br&gt;.book()&lt;br&gt;.forGuests({&lt;br&gt;person.find(10)&lt;br&gt;})&lt;br&gt;.rooms(1)&lt;br&gt;.from(&#34;2008-03-10&#34;)&lt;br&gt;.to(&#34;2008-03-10&#34;);&lt;br&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Much more readable, huh?  One of the main benefits of using DSL&#39;s they highlighted in the tutorial is the simplicity of code you can achieve. You can actually show this code to a business person and he can understand it.  This is a kind of &lt;a href=&#34;http://www.martinfowler.com/bliki/InternalDslStyle.html&#34;&gt;internal DSL&lt;/a&gt;.&lt;br&gt;&lt;br&gt;But there is still a bit of noise in this code. The the parenthesis which are not always desirable, and the use of double quotes for dates. But, this is Java code, and Java doesn&#39;t give too much room for you on the DSL subject. Here was when the speakers changed their focus a bit to Ruby. It&#39;s dynamic nature and metaprogramming techniques provides a powerful flexibility that allows for a looser syntax.&lt;br&gt;&lt;br&gt;So in ruby the previous interface could look like this now:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;Hotel.find(1) .book(1.room).forGuests {&lt;br&gt;Person.find(10)&lt;br&gt;}.from(march.10.2008).to(march.10.2008)&lt;br&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;We got rid of the double quotes and the code looks more fluent, like a normal english sentence. I doubt a business guy woudn&#39;t understand what this code is doing. With this, we can get closer to the business guys, with a common vocabulary, and fill the gap between us.&lt;br&gt;&lt;br&gt;This is just one of the ways we could have written this code and is not the actual example used in the tutorial.  The syntax also really depends on how readable you wanna make your code. I&#39;ll provide those later when they release the digital format of the presentation.&lt;br&gt;&lt;br&gt;So one of the flows that the development of an internal DSL can get is to build a framework and define the DSL on top of it. But we should also keep in mind that DSL&#39;s shouldn&#39;t be general purpose programming languages. They should be created to tackle a specific kind of domain problem, so we would have a whole system made of small DSL&#39;s.&lt;br&gt;&lt;br&gt;Another interesting subject that was touched is testing. How do you test DSL&#39;s?&lt;br&gt;The suggested approach, and that I think is quite reasonable, is to have separate tests for the underlying framework and another to test the DSL and its parser you can assure you have the expected behaviour of both parts.&lt;br&gt;&lt;br&gt;This is really just a summary of my thoughts and of what happened there. I&#39;m not going into too much details right now but if you found something too abstract - and it is! ;) - feel free to ask details. I&#39;ll be more than happy to help.&lt;br&gt;&lt;br&gt;This is definetly an interesting subject and now I&#39;ll head to play more with all that. :)&lt;br&gt;&lt;br&gt;PS; This is not the whole presentation, just the best of it from my stand point. Other subjects include External DSL&#39;s which can actually involve you coding Lexers, Parsers and Compilers. It&#39;s usually not worth the hassle. And it&#39;s too complicated anyway, that&#39;s why I left it out from this post.&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
