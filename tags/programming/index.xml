<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Leonardo Borges</title>
    <link>http://leonardoborges.com/tags/programming/</link>
    <description>Recent content in Programming on Leonardo Borges</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Apr 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://leonardoborges.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>fallingdreams my very own tetris clone</title>
      <link>http://leonardoborges.com/writings/2010/04/09/fallingdreams-my-very-own-tetris-clone/</link>
      <pubDate>Fri, 09 Apr 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/04/09/fallingdreams-my-very-own-tetris-clone/</guid>
      <description>&lt;p&gt;&#xA;This will come as no surprise to my closest friends, but I am a long time game development admirer.  Although I&#39;ve never done anything professionally I did spend some time in the past studying this amazingly interesting field - it&#39;s my dark hobby. As hardware evolves and gamers demand more and more reality from their consoles, the game development industry is one of the few that basically didn&#39;t suffer with the latest economic crisis.&lt;br&gt;&lt;br&gt;3D games are getting more and more sophisticated to the point that it&#39;s very hard for a single person, or even a small team, to develop something worthwhile - think of all the people you need to develop a game such as &lt;a title=&#34;God of War III on Wikipedia&#34; href=&#34;http://en.wikipedia.org/wiki/God_of_War_III&#34; target=&#34;_blank&#34;&gt;God of War III&lt;/a&gt;: screenwriters, artists, musicians, sound engineers, 3D artists, animators, programmers, level designers, combat designers, actors, voiceovers...&lt;br&gt;&lt;br&gt;So I just wanted to have the experience of writing a full game, end-to-end, and that&#39;s where FallingDreams comes in. To be able to do that in a short amount of time, it had to be something simple and that&#39;s why I chose &lt;a title=&#34;Tetris on Wikipedia&#34; href=&#34;http://en.wikipedia.org/wiki/Tetris&#34;&gt;Tetris&lt;/a&gt;. Although simple, it does share most of the steps common to modern games development. It was a very interesting project to work at and you can grab the result &lt;a title=&#34;FallingDreams binary&#34; href=&#34;http://www.leonardoborges.com/writings/wp-content/uploads/2010/04/fallingdreams.jar&#34;&gt;here&lt;/a&gt;. The source code is also available on my github account, &lt;a title=&#34;FallingDreams on GitHub&#34; href=&#34;http://github.com/leonardoborges/FallingDreams&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;a title=&#34;FallingDreams on GitHub&#34; href=&#34;http://github.com/leonardoborges/FallingDreams&#34; target=&#34;_blank&#34;&gt;FallingDreams&lt;/a&gt; is written in Java (JDK 6) and as such it should work fine on Windows, Linux and Mac OS. I tried to be as loyal as possible to the original Tetris rules, but you might find one thing or two that don&#39;t work as one&#39;d exepct.&lt;br&gt;&lt;br&gt;Enjoy! ;)&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;br&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This was my first &#39;full game&#39; and is not intended to be production ready. The code has definitely got room for improvement and it served as my playground where I experimented different design techniques, both game and general software related. And it doesn&#39;t have a single line of tests - crucify me :P &lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;As I said, it&#39;s not supposed to be considered bug free but I&#39;m sure people interested in games development can benefit from the source files. Feel free to fork it as well! It would be cool to see what people would do with it :)&lt;/em&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>learning objective c a ruby analogy</title>
      <link>http://leonardoborges.com/writings/2010/02/25/learning-objective-c-a-ruby-analogy/</link>
      <pubDate>Thu, 25 Feb 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/02/25/learning-objective-c-a-ruby-analogy/</guid>
      <description>&lt;p&gt;&#xA;Learning new programming languages is fun. And if it&#39;s your 2nd, 3rd...Nth programming language you will eventually look for features you already know and love.&lt;br&gt;&lt;br&gt;Coming from Ruby - but after having done my fair amount of Java for many years, among other things - I end up looking for features like &lt;a href=&#34;http://www.leonardoborges.com/writings/2009/07/22/procs-lambdas-blocks-whats-the-difference/&#34; target=&#34;_blank&#34;&gt;blocks&lt;/a&gt;, &lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_open_classes.html&#34; target=&#34;_blank&#34;&gt;open classes&lt;/a&gt; and syntax sugar like &lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001681&#34; target=&#34;_blank&#34;&gt;automatic generation of attribute accessors.&lt;/a&gt; These are hard to let go of.&lt;br&gt;&lt;br&gt;Having decided to learn &lt;a href=&#34;http://developer.apple.com/Mac/library/documentation/Cocoa/Conceptual/ObjectiveC/index.html&#34; target=&#34;_blank&#34;&gt;Objective-C&lt;/a&gt; recently, I was delighted to find out that all of these are available - for better or for worse - and wanted to share this analogy with its Ruby counterparts.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Attribute accessors&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;In ruby, this class definition&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790881.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;implements for you the getters and setters of the instance variable &lt;strong&gt;name&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;&lt;br&gt;In Objective-C, the combination of the @property and @synthesize directives provides you with roughly the same result:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790882.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Now the compiler is responsible for writing those getters/setters for you.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Open classes &amp; blocks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Blocks in ruby are the structures that allow you to - among other things - iterate over arrays like this:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790883.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Objective-C doesn&#39;t have an &#39;each&#39; method in its root array class (NSArray) but since it does support blocks and open classes, you could just write it yourself:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790884.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Yes, I know the syntax isn&#39;t appealing, but using it in your program is a bit better:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790886.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Given the syntactic differences, the code above is very similar to its ruby counterpart. Iterating over an array is just one of the many things blocks are useful for. Others might include dealing with files, network sockets etc...&lt;br&gt;&lt;br&gt;Blocks are powerful structures and are not created everyday, but it&#39;s nice to know that you can resort to them when the time comes. ;)&lt;br&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>how do you keep yourself focused</title>
      <link>http://leonardoborges.com/writings/2009/06/08/how-do-you-keep-yourself-focused/</link>
      <pubDate>Mon, 08 Jun 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/06/08/how-do-you-keep-yourself-focused/</guid>
      <description>&lt;p&gt;&#xA;This is basically a compilation of a few tools/habits that I use to keep focused and at a high level of productivity when working alone. Works great for me and I hope there are useful tips for you as well.&lt;br&gt;&lt;br&gt;&lt;dl&gt; &lt;dt&gt;&lt;strong&gt;Music&lt;/strong&gt;&lt;/dt&gt; &lt;dd&gt;This is one of my favorites. When working alone I hate having noisy people around, which happens quite often if you work in an open office space like me. - It is great for pair programming but I find it inefficient otherwise. Thus, I came up with the term &lt;strong&gt;the Heavy Metal effect&lt;/strong&gt;. Ok, just fit your favorite music genre there but the important thing is that it must act as a barrier to the outside world. It won&#39;t work if you put something new and start babbling the lyrics!&lt;/dd&gt; &lt;dt&gt;&lt;strong&gt;Password Manager&lt;/strong&gt;&lt;/dt&gt; &lt;dd&gt;In my day to day I have a number of web sites open like API documents, programming related groups, email... There are also the ones you open a few times a day like the company bug tracker, review board and etc. I find that having a password manager, in my case &lt;a href=&#34;https://lastpass.com/&#34; target=&#34;_blank&#34;&gt;LastPass&lt;/a&gt;, saves a lot of time. The big advantage of it over similar tools like 1Password is that it works on mac, linux or windows. It&#39;s just a firefox plugin.&lt;/dd&gt; &lt;dt&gt;&lt;strong&gt;Multiple Workspaces&lt;/strong&gt;&lt;/dt&gt; &lt;dd&gt;Probably the most obvious item on this list to developers but I&#39;s never too much to reinforce it. Multiple workspaces are great. And they are available in whatever platform you happen to be locked in. In my case, I split my environment in at least 3 workspaces:&lt;br&gt;-&lt;strong&gt;Development&lt;/strong&gt; - where I keep things like my IDE, Browser and Terminal&lt;br&gt;-&lt;strong&gt;Documentation&lt;/strong&gt; - where I keep API documents, tutorials and related stuff&lt;br&gt;-&lt;strong&gt;Communication&lt;/strong&gt; - where I have my email, both personal and business, twitter and etc. This allows me to easily set a time per day to do each of my stuff without having noise from things that aren&#39;t important to what I&#39;m focusing in that very moment. &lt;/dd&gt; &lt;dt&gt;&lt;strong&gt;App Launcher&lt;/strong&gt;&lt;/dt&gt; &lt;dd&gt;A must! On Mac I use &lt;a href=&#34;http://www.versiontracker.com/dyn/moreinfo/macosx/22549&#34; target=&#34;_blank&#34;&gt;QuickSilver&lt;/a&gt; and on Linux, &lt;a href=&#34;http://do.davebsd.com/release.shtml&#34; target=&#34;_blank&#34;&gt;Gnome Do&lt;/a&gt;. I won&#39;t say much here. If you don&#39;t use some sort of application launcher, do yourself a favor, stop reading and install one. You have no idea of how comfortable and time saver they are.&lt;/dd&gt; &lt;dt&gt;&lt;strong&gt;Batch tasks&lt;/strong&gt;&lt;/dt&gt; &lt;dd&gt;Maybe this wasn&#39;t the best title but I couldn&#39;t think of anything better.&lt;br&gt;As a result of having a communication workspace that I use a few times a day, I find stuff that I&#39;m interested in but don&#39;t have the time to dig at the moment. So I need a way to queue that and read later when I&#39;m home. The tools of the trade in this case are &lt;a href=&#34;http://www.twitter.com&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt; + &lt;a href=&#34;http://blog.evernote.com/2009/04/14/evernote_twitter/&#34; target=&#34;_blank&#34;&gt;Evernote&lt;/a&gt;.&lt;br&gt;Evernote is roughly a to-do manager. And since they released their Twitter integration it&#39;s been dead easy to queue those things I talked about earlier. Just send a direct message to evernote and the item gets added instantly. &lt;/dd&gt; &lt;/dl&gt;Now, what about you? What works for you?&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>why every programmer have to be dumb</title>
      <link>http://leonardoborges.com/writings/2007/11/23/why-every-programmer-have-to-be-dumb/</link>
      <pubDate>Fri, 23 Nov 2007 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2007/11/23/why-every-programmer-have-to-be-dumb/</guid>
      <description>&lt;p&gt;&#xA;At least, dumb for the companies hiring them. The old dream is still for sale out there: Build a &#34;I do everything framework&#34; and hire a bunch of dumb programmers - monkeys? - and you shall make money easily!&lt;br&gt;&lt;br&gt;Just put some button pressers and a full featured enterprise system will be waiting on the other side of this &#34;machine&#34;!&lt;br&gt;&lt;br&gt;C&#39;mon, I thought this dream was over! We&#39;ve had enough proofs that this doesn&#39;t work!&lt;br&gt;&lt;br&gt;Why? Because a framework, system builder, code generator or what you may want to call this thing just can&#39;t do everything. And if you try to build this &#34;monster&#34; you will get yourself a hell of a problem:&lt;br&gt;&lt;ul&gt;&lt;br&gt;&#x9;&lt;li&gt;Your product will never be ready.&lt;br&gt;Or you think that &#34;everything&#34; has limits? Someone will always say: Hey, let&#39;s put this new feature right there... it&#39;s so small....&lt;/li&gt;&lt;br&gt;&#x9;&lt;li&gt;Your product will not work well.&lt;br&gt;Bugs! Bugs! Bugs! I&#39;ve never knew a team that has written enough tests building such a monster. Be prepared! If it&#39;s never ready, you will always be in a rush!&lt;/li&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;But ok, even if you manage to develop this &#34;framework&#34; and hire a bunch of monkeys to press its buttons, that&#39;s when the worst problem arise. (At least worst in my opinion)&lt;br&gt;&lt;br&gt;With this &#34;philosophy&#34;, you assume that you want to hire low level programmers that don&#39;t need to learn anything new besides how to use your full-fledged systems generator. And who the hell likes to work in a place like that?&lt;br&gt;&lt;br&gt;You take from your employees all the joy of development, which is about creativity. All about putting your brain to work. And sooner or later, they will notice that and just quit. You will never be able to stablish a trustworthy relationship within your team as well as to motivate them.&lt;br&gt;&lt;br&gt;How will you motivate a team by telling them they will learn a new framework that isn&#39;t used anywhere else in the world and that they will not improve their thinking?&lt;br&gt;&lt;br&gt;They will become bored. And if not, man, I wouldn&#39;t like to have someone like that in my team.&lt;br&gt;&lt;br&gt;The problem is that managers usually love the idea to build huge enterprise systems at low costs. And some consultants sell this idea quite well.&lt;br&gt;&lt;br&gt;I prefer to have trustworthy people in my team. Provide an environment that promotes learning. Let their creativity flow. Only with this approach you will have a first class team of developers producing, happily, high quality enterprise systems.&lt;br&gt;&lt;br&gt;That&#39;s the message for the companies out there: Software development IS a creative process. Promote learning. Let them create.&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
