<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Leonardo Borges</title>
    <link>http://leonardoborges.com/tags/ruby/</link>
    <description>Recent content in Ruby on Leonardo Borges</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Apr 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://leonardoborges.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>look ma no hands tweeting with your voice</title>
      <link>http://leonardoborges.com/writings/2011/04/09/look-ma-no-hands-tweeting-with-your-voice/</link>
      <pubDate>Sat, 09 Apr 2011 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2011/04/09/look-ma-no-hands-tweeting-with-your-voice/</guid>
      <description>&lt;p&gt;&#xA;This is just another one of those boring weekends where I felt the need to hack on something.&lt;br&gt;&lt;br&gt;If you follow Google Chrome&#39;s &lt;a title=&#34;Chrome&#39;s blog&#34; href=&#34;http://chrome.blogspot.com/&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; you&#39;re probably aware of this little nifty feature they started to implement in their latest builds: &lt;a href=&#34;http://chrome.blogspot.com/2011/03/talking-to-your-computer-with-html5.html&#34; target=&#34;_blank&#34;&gt;HTML5 voice recognition&lt;/a&gt;.&lt;br&gt;&lt;br&gt;And that&#39;s when it struck me: &#34;Hey, what if I use that and tweet with my voice instead of typing?&#34;&lt;br&gt;&lt;br&gt;The result of this hacking session is &lt;a href=&#34;http://loudparrot.heroku.com/&#34;&gt;LoudParrot&lt;/a&gt;, a sample Rails app that shows how to do just that. You &lt;strong&gt;will&lt;/strong&gt; need a fairly recent build of Google Chrome -beta - which you can download &lt;a href=&#34;http://www.google.com/intl/en/landing/chrome/beta/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;You can get the source on &lt;a href=&#34;https://github.com/leonardoborges/loud-parrot&#34;&gt;GitHub&lt;/a&gt;.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ide review rubymine</title>
      <link>http://leonardoborges.com/writings/2011/02/16/ide-review-rubymine/</link>
      <pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2011/02/16/ide-review-rubymine/</guid>
      <description>&lt;p&gt;&#xA;Since I started working with Ruby about 4 years ago, I&#39;ve used quite a few text editors and ide&#39;s: &lt;a href=&#34;http://www.aptana.com/products/radrails&#34;&gt;RadRails&lt;/a&gt;, &lt;a href=&#34;http://projects.gnome.org/gedit/&#34; target=&#34;_blank&#34;&gt;gedit&lt;/a&gt; + &lt;a href=&#34;https://github.com/lexrupy/gmate&#34; target=&#34;_blank&#34;&gt;plugins&lt;/a&gt;, &lt;a href=&#34;http://macromates.com/&#34; target=&#34;_blank&#34;&gt;TextMate&lt;/a&gt; and &lt;a href=&#34;http://www.vim.org/&#34; target=&#34;_blank&#34;&gt;Vim&lt;/a&gt;.&lt;br&gt;&lt;br&gt;TextMate is the one I&#39;ve used the most and it&#39;s been ok for a long time. Until you realize you need half a dozen bundles to make it really useful for ruby development. Obviously the same goes for Vim and gedit.&lt;br&gt;&lt;br&gt;Oh, and forget about refactoring. In these tools refactoring equals regex global replace. So if you need it, well, forget it.&lt;br&gt;&lt;br&gt;That&#39;s when I decided to give &lt;strong&gt;&lt;a href=&#34;http://www.jetbrains.com/ruby/&#34; target=&#34;_blank&#34;&gt;RubyMine&lt;/a&gt;&lt;/strong&gt; a fair go. I&#39;ve been using it heavily for a while now and I must say I love it!&lt;br&gt;&lt;br&gt;What pissed me off about RadRails when I first tried it was the speed. It was too slow, something people take for granted when running java based IDE&#39;s.&lt;br&gt;&lt;br&gt;However this is not true for RubyMine. You DO take a hit on startup, nothing major, but once it&#39;s done, it&#39;s a breeze.&lt;br&gt;&lt;br&gt;I&#39;ve compiled a list of my favorite productivity shortcuts and features. Hope it&#39;ll be useful to someone else.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Productivity Shortcuts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;hr /&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Ctrl + Tab&lt;/em&gt; - File Switcher&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Shift + T&lt;/em&gt; - Switching between implementation and test works perfectly. Even in a pure ruby project&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Shift + F12&lt;/em&gt; - Expand/restore editor&lt;br&gt;&lt;br&gt;&lt;em&gt;Alt + Shift + N&lt;/em&gt; - Go to model/view/controller&lt;br&gt;&lt;br&gt;&lt;em&gt;Alt + F1&lt;/em&gt; - Show current file in other views such as the project tree (scroll to file)&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Shift + N&lt;/em&gt; - Open file&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Alt + Shift + N&lt;/em&gt; - Open symbol - across files&lt;br&gt;&lt;br&gt;&lt;em&gt;Alt + F7&lt;/em&gt; - Find usages - when on a method, variable, etc…&lt;br&gt;&lt;br&gt;&lt;strong&gt;Running/Debugging&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Ctrl + Shift + F10&lt;/em&gt; - Run current [test] file. When inside a test method, run that single method.&lt;br&gt;&lt;br&gt;&lt;em&gt;Ctrl + Shift + F9&lt;/em&gt; - Same as above, but in debug mode.&lt;br&gt;&lt;br&gt;&lt;em&gt;Shift + F10/Shift + F9&lt;/em&gt; - Run/Debug last action executed&lt;br&gt;&lt;br&gt;&lt;em&gt;Alt + R&lt;/em&gt; - Run rake task&lt;br&gt;&lt;br&gt;&lt;strong&gt;Refactoring&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Alt + N&lt;/em&gt; - Inline variable/ method&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Alt + M&lt;/em&gt; - Extract method&lt;br&gt;&lt;br&gt;&lt;em&gt;Shift + F6&lt;/em&gt; - Rename&lt;br&gt;&lt;br&gt;&lt;em&gt;F5&lt;/em&gt; - Copy current file as...&lt;br&gt;&lt;br&gt;&lt;strong&gt;Editing&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt; Cmd + Y&lt;/em&gt; - Delete line&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + D&lt;/em&gt; - Duplicate Line/Selection&lt;br&gt;&lt;br&gt;&lt;em&gt;Alt + Mouse&lt;/em&gt; - Column selection&lt;br&gt;&lt;br&gt;&lt;em&gt;Cmd + Shift + (Up Arrow|Down Arrow)&lt;/em&gt; - Moves de line or selected block of code up or down&lt;br&gt;&lt;br&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;hr /&gt;&lt;em&gt;Code completion&lt;/em&gt; - It&#39;s fairly accurate and pretty fast. They&#39;ve done some good yak shaving around this area.&lt;br&gt;&lt;br&gt;&lt;em&gt;Debugger&lt;/em&gt; - The debugging interface is an absolute beauty. Saved me a lot of time where I&#39;d have used puts statements or googled to re-learn how to use ruby-debug instead. Definitely worth checking out.&lt;br&gt;&lt;br&gt;&lt;strong&gt;The bad stuff&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;hr /&gt;&lt;em&gt;It is not free&lt;/em&gt; - unless you are a committer to an open-source project. But it&#39;s not expensive either.&lt;br&gt;&lt;br&gt;&lt;em&gt;It is a bit slower&lt;/em&gt; - but not that much. The performance hit is insignificant compared to the added value.&lt;br&gt;&lt;br&gt;&lt;em&gt;Regex file open, TextMate style&lt;/em&gt; - What can I say? I do miss this.&lt;br&gt;&lt;br&gt;&lt;em&gt;Wrap highlighted text&lt;/em&gt; - In TextMate, if you highlight a word and press &#34;, [, {, ( or # it surrounds the word with the respective combination of quotes, brackets, etc... Another missed feature&lt;br&gt;&lt;br&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;br&gt;It&#39;s probably soon to say it but so far RubyMine has been my missing Ruby IDE. And I&#39;m very happy with it. :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>clouds against the floods presentation available</title>
      <link>http://leonardoborges.com/writings/2011/02/12/clouds-against-the-floods-presentation-available/</link>
      <pubDate>Sat, 12 Feb 2011 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2011/02/12/clouds-against-the-floods-presentation-available/</guid>
      <description>&lt;p&gt;&#xA;Last Tuesday I gave a short presentation on the whole &lt;a title=&#34;Clouds against the Floods&#34; href=&#34;http://www.leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/&#34; target=&#34;_blank&#34;&gt;Clouds Against the Floods&lt;/a&gt; thing at the &lt;a title=&#34;Ruby on Rails Oceania Meetup&#34; href=&#34;http://rubyonrails.com.au/sydney-meetups&#34; target=&#34;_blank&#34;&gt;Ruby on Rails Oceania User Group&lt;/a&gt; here in Sydney.&lt;br&gt;&lt;br&gt;Those guys are awesome and they recorded the talk - thanks guys!&lt;br&gt;&lt;br&gt;If you&#39;d like to download the slides, they&#39;re available on &lt;a title=&#34;Slideshare profile&#34; href=&#34;http://www.slideshare.net/borgesleonardo/clouds-against-the-floods&#34; target=&#34;_blank&#34;&gt;Slideshare&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Enjoy! ;)&lt;br&gt;&lt;br&gt;&lt;object classid=&#34;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&#34; width=&#34;425&#34; height=&#34;344&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34;&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&gt;&lt;param name=&#34;src&#34; value=&#34;http://www.youtube.com/v/DYDD9XiW3Gg?hl=en&amp;amp;fs=1&#34; /&gt;&lt;param name=&#34;allowfullscreen&#34; value=&#34;true&#34; /&gt;&lt;embed type=&#34;application/x-shockwave-flash&#34; width=&#34;425&#34; height=&#34;344&#34; src=&#34;http://www.youtube.com/v/DYDD9XiW3Gg?hl=en&amp;amp;fs=1&#34; allowscriptaccess=&#34;always&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>update to appconstants it can now be used as a gem</title>
      <link>http://leonardoborges.com/writings/2011/02/02/update-to-appconstants-it-can-now-be-used-as-a-gem/</link>
      <pubDate>Wed, 02 Feb 2011 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2011/02/02/update-to-appconstants-it-can-now-be-used-as-a-gem/</guid>
      <description>&lt;p&gt;&#xA;This is just a quick post to let you know that &lt;a title=&#34;app_constants github repo&#34; href=&#34;https://github.com/leonardoborges/app_constants&#34; target=&#34;_blank&#34;&gt;AppConstants&lt;/a&gt; can now be used as gem!&lt;br&gt;&lt;br&gt;Just add it to your Gemfile and &#39;bundle install&#39; it:&lt;br&gt;&lt;br&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#in your Gemfile&#xA;gem &amp;#34;app_constants&amp;#34;&#xA;&#xA;#in the console&#xA;$ bundle install&#xA;$ rails generate app_constants&#xA;#then follow the instructions on-screen instructions&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;It can also be used without Rails. Check out full instructions on the &lt;a title=&#34;app_constants github repo&#34; href=&#34;https://github.com/leonardoborges/app_constants&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Feedback welcome :)&lt;/p&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>clouds against the floods</title>
      <link>http://leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/</link>
      <pubDate>Sun, 16 Jan 2011 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2011/01/16/clouds-against-the-floods/</guid>
      <description>&lt;p&gt;&#xA;I think by now everyone&#39;s heard of the hard time the guys up in Queensland, Australia are having because of the &lt;a title=&#34;Queensland Floods&#34; href=&#34;http://www.google.com/search?q=qld+floods&#34; target=&#34;_blank&#34;&gt;recent floods&lt;/a&gt;. People have lost their lives and many others have lost their homes and businesses, product of years of hard work.&lt;br&gt;&lt;br&gt;As a result of this massive disaster the Queensland Government decided to run a telethon to encourage donations to help the flood victims. The Telethon aired last Sunday, 09/01/11, on Channel 9 and lasted for 2 hours.&lt;br&gt;&lt;br&gt;The problem was the existing donations system that the Government had been using so far: it was just not thought out to handle the load we were expecting to have on Sunday.&lt;br&gt;&lt;br&gt;That&#39;s when my employer, &lt;a title=&#34;ThoughtWorks&#34; href=&#34;http://www.thoughtworks.com/&#34; target=&#34;_blank&#34;&gt;ThoughtWorks&lt;/a&gt;, kindly offered a hand to &lt;a href=&#34;http://www.qld.gov.au/smartservice/&#34; target=&#34;_blank&#34;&gt;Smart Services Queensland&lt;/a&gt; in the attempt to make sure they could receive all donations that were likely to come through the web.&lt;br&gt;&lt;br&gt;After that, on the Thursday afternoon before the event, &lt;a title=&#34;Phillip Calçado&#34; href=&#34;http://fragmental.tw/&#34; target=&#34;_blank&#34;&gt;Phillip Calçado&lt;/a&gt;, Ben Barnard and I set off on a mission against the clock: we had a little over 48 hours to develop, test and deploy an application that was expected to handle thousands of users. Not only that but an application that, should it fail, would prevent millions of dollars from reaching the people in need in Queensland. This was a great responsibility but we knew we could do it.&lt;br&gt;&lt;br&gt;Given the time constraints it was a bit obvious that we would use &lt;a title=&#34;Ruby on Rails&#34; href=&#34;http://rubyonrails.org/&#34; target=&#34;_blank&#34;&gt;Ruby on Rails&lt;/a&gt; for this app. Both because of the productivity it&#39;s known for and because we had the knowledge right there. With that out of the way, we had to decide how and where we would deploy this thing. We thought a little about it and came down to to 2 options: &lt;a title=&#34;Amazon EC2&#34; href=&#34;http://aws.amazon.com/ec2/&#34;&gt;Amazon EC2&lt;/a&gt; or &lt;a title=&#34;Heroku&#34; href=&#34;http://heroku.com/&#34; target=&#34;_blank&#34;&gt;Heroku&lt;/a&gt; (which is powered by Amazon EC2 under the hood). I pushed hard for Heroku and that&#39;s what we ended up going with.&lt;br&gt;&lt;br&gt;Now it was time to get down and dirty and start coding the app. In principle it should be fairly simple. It needed a form where a potential donor would fill out his/her information, giving the option to receive the tax receipt by email or regular mail - more on that later. Upon clicking submit users would be taken to the secure payment gateway website where they could input their credit card number and finish the payment, after which they would be taken back to our app with a success - or an error - message and a transaction number.&lt;br&gt;&lt;br&gt;Now this work flow has a couple of implications: First, all emails would have to be sent in the background so as to not interfere with the website performance. We were expecting to be sending thousands of them - workers anyone?&lt;br&gt;&lt;br&gt;Second, the payment gateway integration would have to be developed and tested from scratch. Up until now the Queensland Government integrated with it in a different manner that could not be reused in this case.&lt;br&gt;&lt;br&gt;And most important of all, although simple in concept, we had no idea of the load we should be preparing for. There was just no data from previous telethons. Thus we decided to prepare for the maximum we possibly could.&lt;br&gt;&lt;br&gt;As we developed the application we deployed continuously to Heroku in order to test the payment gateway integration, benchmark the app using &lt;a title=&#34;Apache AB&#34; href=&#34;http://httpd.apache.org/docs/2.0/programs/ab.html&#34; target=&#34;_blank&#34;&gt;Apache AB&lt;/a&gt;, setup cache headers - Heroku uses &lt;a title=&#34;Varnish&#34; href=&#34;http://www.varnish-cache.org/&#34; target=&#34;_blank&#34;&gt;Varnish&lt;/a&gt; - and find bottlenecks.&lt;br&gt;&lt;br&gt;Email was one of these bottlenecks and that&#39;s why we decided to handle that in the background using &lt;a title=&#34;Delayed::Job&#34; href=&#34;https://github.com/collectiveidea/delayed_job&#34; target=&#34;_blank&#34;&gt;Delayed::Jobs&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Since the first deployment, we also tweaked a couple of things at Heroku, such as migrating from their free PostgreSQL offering to a dedicated instance that we believed would both take the load and have plenty of room for all the data - as I write this post, we are already well over the 5MB limit they offer for free.&lt;br&gt;&lt;br&gt;Long story short, by Saturday evening  the website was up and running on 5 app instances, a 6th instance running background jobs - sending emails - and a dedicated PostgreSQL database server.&lt;br&gt;&lt;br&gt;As Heroku is outside the Government network, their SMTP server was a no go on the short term so we also integrated the app with &lt;a title=&#34;SendGrid&#34; href=&#34;http://sendgrid.com/&#34; target=&#34;_blank&#34;&gt;SendGrid&lt;/a&gt;, an email delivery service that fitted perfectly our needs - although the site got so much traction that we went over our monthly quota with them. But the nice guys from SendGrid increased our limit after I opened a ticket explaining the situation!&lt;br&gt;&lt;br&gt;As for performance we used &lt;a href=&#34;http://newrelic.com/&#34;&gt;NewRelic&lt;/a&gt; to monitor the application, which Heroku also makes a breeze to integrate with.&lt;br&gt;&lt;br&gt;We all went home to rest and get ready for Sunday, the day of the Telethon, when we would be monitoring the app throughout the day. We were all excited and when the show went live, we started seeing all those beautiful access charts moving like crazy, spiking over 720 requests per minute and being solid like a rock with flat and fast response times throughout the night.&lt;br&gt;&lt;br&gt;In about two hours we had over AUD$2,000,000.00 (two million) donated through our website.&lt;br&gt;&lt;br&gt;Since then the number of transactions dropped but has stayed constant and as of today we&#39;ve received AUD$25,438,518.32 (over 25 millions of dollars) that will be donated to the flood victims in Queensland.&lt;br&gt;&lt;br&gt;Oh, and the site is still up and going strong so move your fingers and go help: &lt;a title=&#34;Queensland Floods Telethon&#34; href=&#34;http://telethon.smartservice.qld.gov.au/&#34; target=&#34;_blank&#34;&gt;telethon.smartservice.qld.gov.au&lt;/a&gt; - there will be heaps of people grateful for your donation.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>small update to appconstants</title>
      <link>http://leonardoborges.com/writings/2010/04/24/small-update-to-appconstants/</link>
      <pubDate>Sat, 24 Apr 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/04/24/small-update-to-appconstants/</guid>
      <description>&lt;p&gt;&#xA;It&#39;s been now over a week since we moved to Sydney and everything is just great. We&#39;re still house hunting but I got a feeling we&#39;ll have a home soon. :)&lt;br&gt;&lt;br&gt;In the meantime, this morning I got a feature request on github to allow &lt;a href=&#34;http://github.com/leonardoborges/app_constants&#34; target=&#34;_blank&#34;&gt;AppConstants&lt;/a&gt; to interpret YAML files with embedded code like this:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790877.js?file=gistfile1.yml&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;I haven&#39;t needed it myself but thought it would be a nice addition so my &lt;a href=&#34;http://github.com/leonardoborges/app_constants/commit/7c116c8cf9307942f7d8682779510e623156fd08&#34;&gt;latest commit&lt;/a&gt; does exactly that. Let me know if you find any issues.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>upgrading appconstants to rails 3</title>
      <link>http://leonardoborges.com/writings/2010/02/28/upgrading-appconstants-to-rails-3/</link>
      <pubDate>Sun, 28 Feb 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/02/28/upgrading-appconstants-to-rails-3/</guid>
      <description>&lt;p&gt;&#xA;Back in January I &lt;a href=&#34;http://www.leonardoborges.com/writings/2010/01/23/my-take-on-rails-environment-specific-constants/&#34; target=&#34;_blank&#34;&gt;announced&lt;/a&gt; a small but useful plugin called &lt;a href=&#34;http://github.com/leonardoborges/app_constants&#34;&gt;AppConstants&lt;/a&gt;, that basically provides a central place where you can store environment specific constants. And since I started using Rails 3 in the past week, I thought I&#39;d make it Rails 3 compatible.&lt;br&gt;&lt;br&gt;The code is really simple and - as I expected - the upgrade process was quite straight forward.&lt;br&gt;&lt;br&gt;I&#39;m not gonna write a guide here on how to upgrade your plugins to Rails 3 - there is plenty about that around the web - but instead, just show the steps I went through to upgrade mine. Similar plugins might have a similar upgrade path.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Generators&lt;/strong&gt;&lt;br&gt;&lt;br&gt;My plugin makes use of a simple generator that copies its default constants file and initializer to &lt;em&gt;Rails.root/config&lt;/em&gt; and &lt;em&gt;Rails.root/config/initializers&lt;/em&gt;, respectively. In Rails 2.x it was located under &lt;em&gt;Rails.root/vendor/plugins/app_constants/generators/app_constants&lt;/em&gt; and it was defined like so:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790878.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;In Rails 3, the generators had to be moved to &lt;em&gt;Rails.root/vendor/plugins/app_constants/lib/generators&lt;/em&gt;. Notice the root directory app_constants under generators has been removed as well. And the code was changed to this:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790879.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;We had three simple changes here:&lt;br&gt;&lt;br&gt;- &lt;em&gt;The generator now extends from &lt;em&gt;&lt;strong&gt;Rails::Generators::Base&lt;/strong&gt;&lt;/em&gt;&lt;/em&gt;: This class uses the Thor infrastructure to handle generators. - more info &lt;a href=&#34;http://blog.plataformatec.com.br/2009/07/creating-your-own-generators-with-thor/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;- &lt;em&gt;I had to implement the &lt;strong&gt;source_root&lt;/strong&gt; class method&lt;/em&gt;, which basically tells your generator where to find your template files.&lt;br&gt;&lt;br&gt;- &lt;em&gt;The &lt;em&gt;&lt;strong&gt;manifest&lt;/strong&gt;&lt;/em&gt; method is now called &lt;em&gt;&lt;strong&gt;copy_config_files&lt;/strong&gt;&lt;/em&gt; - or &lt;strong&gt;&lt;em&gt;anything&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt; you want. &lt;br&gt;&lt;br&gt;The way this works is that, once you invoke the generator, Thor will sequentially call all instance methods in your generator class - or the only instance method in the example above. If your generator does a lot, it will allow for a better organization of your tasks.&lt;br&gt;&lt;br&gt;And that&#39;s it! I did change a couple of other things but that had to be changed anyway and are not related to the migration.&lt;br&gt;&lt;br&gt;For Rails 2.3.x users, you&#39;ll find a 2.3.x branch on github that should work for you.&lt;br&gt;&lt;br&gt;Cheers&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>learning objective c a ruby analogy</title>
      <link>http://leonardoborges.com/writings/2010/02/25/learning-objective-c-a-ruby-analogy/</link>
      <pubDate>Thu, 25 Feb 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/02/25/learning-objective-c-a-ruby-analogy/</guid>
      <description>&lt;p&gt;&#xA;Learning new programming languages is fun. And if it&#39;s your 2nd, 3rd...Nth programming language you will eventually look for features you already know and love.&lt;br&gt;&lt;br&gt;Coming from Ruby - but after having done my fair amount of Java for many years, among other things - I end up looking for features like &lt;a href=&#34;http://www.leonardoborges.com/writings/2009/07/22/procs-lambdas-blocks-whats-the-difference/&#34; target=&#34;_blank&#34;&gt;blocks&lt;/a&gt;, &lt;a href=&#34;http://rubylearning.com/satishtalim/ruby_open_classes.html&#34; target=&#34;_blank&#34;&gt;open classes&lt;/a&gt; and syntax sugar like &lt;a href=&#34;http://ruby-doc.org/core/classes/Module.html#M001681&#34; target=&#34;_blank&#34;&gt;automatic generation of attribute accessors.&lt;/a&gt; These are hard to let go of.&lt;br&gt;&lt;br&gt;Having decided to learn &lt;a href=&#34;http://developer.apple.com/Mac/library/documentation/Cocoa/Conceptual/ObjectiveC/index.html&#34; target=&#34;_blank&#34;&gt;Objective-C&lt;/a&gt; recently, I was delighted to find out that all of these are available - for better or for worse - and wanted to share this analogy with its Ruby counterparts.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Attribute accessors&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;In ruby, this class definition&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790881.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;implements for you the getters and setters of the instance variable &lt;strong&gt;name&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;&lt;br&gt;In Objective-C, the combination of the @property and @synthesize directives provides you with roughly the same result:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790882.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Now the compiler is responsible for writing those getters/setters for you.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Open classes &amp; blocks&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Blocks in ruby are the structures that allow you to - among other things - iterate over arrays like this:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790883.js?file=gistfile1.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Objective-C doesn&#39;t have an &#39;each&#39; method in its root array class (NSArray) but since it does support blocks and open classes, you could just write it yourself:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790884.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Yes, I know the syntax isn&#39;t appealing, but using it in your program is a bit better:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/790886.js?file=gistfile1.m&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Given the syntactic differences, the code above is very similar to its ruby counterpart. Iterating over an array is just one of the many things blocks are useful for. Others might include dealing with files, network sockets etc...&lt;br&gt;&lt;br&gt;Blocks are powerful structures and are not created everyday, but it&#39;s nice to know that you can resort to them when the time comes. ;)&lt;br&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>hacking rubys syntax</title>
      <link>http://leonardoborges.com/writings/2010/02/03/hacking-rubys-syntax/</link>
      <pubDate>Wed, 03 Feb 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/02/03/hacking-rubys-syntax/</guid>
      <description>&lt;p&gt;&#xA;&lt;strong&gt;What?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;In Ruby you have basically two ways of defining private methods:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791025.js?file=test.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;I see a small problem with both approaches. In the first one, and the most obvious, is that you need to duplicate the method name as well as add an extra method call - private - just to change its visibility.&lt;br&gt;&lt;br&gt;The second approach avoids this but adds the risk of accidentally putting a method that is intended to be public under the private section of the source file, which can render an annoying debugging session.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Personally, I like to have a &lt;a href=&#34;http://www.leonardoborges.com/writings/2009/09/18/refactoring-for-readability/&#34; target=&#34;_blank&#34;&gt;smooth reading flow in my source files&lt;/a&gt;. That means that if the public method_a makes use of the private method_b, I want method_b defined right below its caller, which is possible - but verbose - using the private method call:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791026.js?file=test.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;But can be somewhat harder to accomplish if you decide to split your source file in sections:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791028.js?file=test.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;I wanted to be able to define a private method with a single reserved keyword...&lt;br&gt;&lt;br&gt;&lt;strong&gt;How?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;What if I could define a private method using this new syntax:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791029.js?file=test.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;It turns out I can.&lt;br&gt;&lt;br&gt;Notice the &lt;strong&gt;def_p&lt;/strong&gt; keyword? This is a new keyword I created by changing ruby&#39;s parser and that behaves mostly like the &lt;strong&gt;def&lt;/strong&gt; keyword, except that it defines a private method instead.&lt;br&gt;&lt;br&gt;If you wanna read the code that allows this behavior and try it yourself, &lt;a href=&#34;http://www.leonardoborges.com/writings/wp-content/uploads/2010/02/def_p_extension.diff&#34;&gt;download the patch I wrote&lt;/a&gt; and apply it to the ruby source code - I patched version &lt;strong&gt;1.9.1-p376&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;After applying the patch, just build ruby as usual:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791031.js?file=gistfile1.eclass&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;And then try running this script:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791033.js?file=test.rb&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;You should see the following output:&lt;br&gt;&lt;br&gt;&lt;script src=&#34;https://gist.github.com/791034.js?file=gistfile1.eclass&#34;&gt;&lt;/script&gt;&lt;br&gt;&lt;br&gt;Happy hacking :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>managing multiple ruby versions</title>
      <link>http://leonardoborges.com/writings/2010/01/02/managing-multiple-ruby-versions/</link>
      <pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2010/01/02/managing-multiple-ruby-versions/</guid>
      <description>&lt;p&gt;&#xA;Today I read a nice &lt;a href=&#34;http://akitaonrails.com/2010/01/01/limpando-meu-ambiente-de-desenvolvimento&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt; - in Portuguese - by &lt;a href=&#34;http://akitaonrails.com/&#34; target=&#34;_blank&#34;&gt;Fábio Akita&lt;/a&gt; on how to manage multiple ruby versions on your machine. I&#39;ve tried it once with some tool I can&#39;t even remember the name but failed miserably.&lt;br&gt;&lt;br&gt;But this time things look very different. The tool here is the &lt;a href=&#34;http://rvm.beginrescueend.com&#34; target=&#34;_blank&#34;&gt;rvm&lt;/a&gt; - short for Ruby Version manager - and it works just great.&lt;br&gt;&lt;br&gt;Let&#39;s cut to the chase and imagine that you, like me, want to run/develop/test your code on both ruby 1.8.7 and ruby 1.9.1. These steps would get you up and running in a few minutes:&lt;br&gt;&lt;br&gt;&lt;strong&gt;Install rvm:&lt;/strong&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ gem sources -a http://gemcutter.org/&lt;br&gt;$ gem install rvm&lt;br&gt;$ rvm-install&lt;br&gt;$ echo &#34;if [[ ! -z $HOME/.rvm ]] ; then source $HOME/.rvm ; fi&#34; &gt;&gt; ~/.bash_profile&lt;br&gt;$ source ~/.rvm/scripts/rvm&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Install the ruby interpreters you want to use:&lt;/strong&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ rvm  install ruby-1.8.7-p160&lt;br&gt;$ rvm  install ruby-1.9.1&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Now it&#39;s important to notice that at this point you have separate gem installations for each of the interpreters you&#39;ve installed in the previous step. That said, just go ahead and switch between your interpreters and use your command line scripts - ruby, gem, etc... - as usual.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Switching between interpreters:&lt;/strong&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ rvm ruby-1.8.7-p160  #switch to the specified version &lt;br&gt;$ ruby -v&lt;br&gt;ruby 1.8.7 (2009-04-08 patchlevel 160) [i686-darwin9.8.0]&lt;br&gt;$ gem install rails  #note I&#39;m not using sudo since the new gem paths point to the user&#39;s home directory &lt;br&gt;&lt;br&gt;$ rvm ruby-1.9.1  #switch to the specified version &lt;br&gt;$ ruby -v&lt;br&gt;ruby 1.9.1p376 (2009-12-07 revision 26041) [i386-darwin9.8.0]&lt;br&gt;$ gem install rails  #note I&#39;m not using sudo since the new gem paths point to the user&#39;s home directory&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;And that&#39;s it, just go on and install rails, merb, sinatra or whatever rocks your boat!&lt;br&gt;rvm will work with MRI/YARV, JRuby, Ruby EE and Rubinius. Enjoy and don&#39;t forget to check &lt;a href=&#34;http://rvm.beginrescueend.com&#34; target=&#34;_blank&#34;&gt;rvm&lt;/a&gt;&#39;s website for the complete documentation! :) &#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>refactoring for readability</title>
      <link>http://leonardoborges.com/writings/2009/09/18/refactoring-for-readability/</link>
      <pubDate>Fri, 18 Sep 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/09/18/refactoring-for-readability/</guid>
      <description>&lt;p&gt;&#xA;Yesterday I&#39;ve done something I should do more often: Revisit some code written a while ago for our current project and make it better.&lt;br&gt;&lt;br&gt;Let&#39;s face it. We all write crappy code the 1st time. The difference is in what we do about it afterwards.&lt;br&gt;We might decide it&#39;s good enough and keep moving, or we could (and should!) stop and refactor it!&lt;br&gt;&lt;br&gt;The code I revisited worked as a refactoring exercise and it&#39;s initial version is shown below:&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Jphoto&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#a few other methods ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_photo&lt;/span&gt;(file_data, hotel_id, send_rss, options &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tmp/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Time&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;rand(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;open(file_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;puts(file_data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   params &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;,file_name),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hotel&amp;#39;&lt;/span&gt;, hotel_id),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PhotoUploadTest&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   extract_extra_params!(params, options)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Easy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;service_uri_base&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/photoupld&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;multipart_form_post &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;http_post(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;params)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_code &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     error_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File upload failed with code: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_code&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;Rails&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;logger&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info error_msg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; error_msg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;delete(file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   hotel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Hotel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_by_id(hotel_id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   hotel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cache&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;destroy_all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   send_upload_rss(hotel, original_upload_url(c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;body_str) , options) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; send_rss&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_upload_rss&lt;/span&gt;(hotel, photo_url, options)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manage_images_link&lt;/span&gt;(hotel_id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;extract_extra_params!&lt;/span&gt;(params, options)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   params &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;, options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:status&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   params &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;upload_source&amp;#39;&lt;/span&gt;, options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:upload_source&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:upload_source&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   params &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploader_ip&amp;#39;&lt;/span&gt;, options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:uploader_ip&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:uploader_ip&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   params &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Curl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;PostField&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uploader_email&amp;#39;&lt;/span&gt;, options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:uploader_email&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; options&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:uploader_email&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br&gt;Look at the post_photo method. It has problems in so many levels that it&amp;rsquo;s hard to start. &lt;br&gt;Methods should do &amp;ldquo;one thing&amp;rdquo; and that method obviously does much more than that, mixing different levels of abstraction.&lt;br&gt;&lt;br&gt;But let&amp;rsquo;s start with the easy parts first, keeping in mind that I was aiming for readability.&lt;br&gt;&lt;br&gt;Lines 7 to 10 seem to be there just to make the reader&amp;rsquo;s life harder. It&amp;rsquo;s creating a temporary file through some custom logic instead of using the tools provided by the language. Unnecessary and only pollutes our eyes. My first measure was to use ruby&amp;rsquo;s TempFile class for this. Better, but we still have a long way.&lt;br&gt;&lt;br&gt;Right at line 12 it creates some sort of default parameters list, after which it extracts some extra options. I don&amp;rsquo;t know what that method does but it&amp;rsquo;s clearly using output arguments, which we should avoid at all costs, as they lead to confusion. This is a big smell as well, and another refactoring step added to my list.&lt;br&gt;&lt;br&gt;On line 21 starts the code that handles what to do when we get a response_code other than 200 from our request. Apart from the fact that this code doesn&amp;rsquo;t feel right here, we just happen to know that in HTTP, 200 means success, but that might not be clear to someone looking at the code for the 1st time.&lt;br&gt;&lt;br&gt;Then the code goes on to delete the temp file, clear the hotel&amp;rsquo;s cache and send the rss if the rss&amp;rsquo; flag is true.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Let there be refactoring&amp;hellip;.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Geez, how many lines have I used to explain what the code does? Since I don&amp;rsquo;t wanna bore you to death, here is my refactored version of this method, trying to avoid as much as I can the problems I highlighted previously:&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails summit 2009 im speaking</title>
      <link>http://leonardoborges.com/writings/2009/09/03/rails-summit-2009-im-speaking/</link>
      <pubDate>Thu, 03 Sep 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/09/03/rails-summit-2009-im-speaking/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://www.railssummit.com.br?utm_campaign=Railssummit&amp;amp;utm_source=banner_parceiros&amp;amp;utm_medium=banner&amp;amp;utm_content=en_souPalestrante_210x60&#34;&gt;&lt;img src=&#34;http://railssummit.com.br/images/banners/en_souPalestrante_210x60.jpg&#34; alt=&#34;Rails Summit 2009&#34; /&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;I&#39;ll be speaking at this year&#39;s &lt;a href=&#34;http://railssummit.com.br/en/pages/home&#34; target=&#34;_blank&#34;&gt;Rails Summit Latin America&lt;/a&gt; in Sao Paulo, Brazil. It will be a good opportunity to meet some &lt;a href=&#34;http://railssummit.com.br/en/speakers&#34;&gt;amazing people&lt;/a&gt; and visit friends back home! :)&lt;br&gt;&lt;br&gt;Overall I&#39;ll be spending 12 days in Brazil, with 2 of them dedicated to the conference. The other 10 I&#39;ll be in Rio de Janeiro visiting my family and friends. I strongly advise you to spend some time in Rio too, if at all possible. It&#39;s an amazing city and you can contact me if you have any questions.&lt;br&gt;&lt;br&gt;Back to the conference, my session is called &lt;strong&gt;JRuby in the enterprise world: Using Rails with legacy code&lt;/strong&gt;, and will be given in the form of a tutorial. I will walk you through some problems we had while making this kind of integration at my company, focusing mostly on dependency management.&lt;br&gt;&lt;br&gt;At the end I hope you&#39;ll have a good understanding of what JRuby is capable of in a legacy environment.&lt;br&gt;&lt;br&gt;If you&#39;re planning to attend and would like to hear anything specific about JRuby, please let me know, I can try and squeeze in.&lt;br&gt;&lt;br&gt;C u there!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails rumble 09</title>
      <link>http://leonardoborges.com/writings/2009/08/25/rails-rumble-09/</link>
      <pubDate>Tue, 25 Aug 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/08/25/rails-rumble-09/</guid>
      <description>&lt;p&gt;&#xA;&lt;strong&gt;Update:&lt;/strong&gt; The service is now down while we move it from the VPS provided by Rails Rumble to our own. I&#39;ll let you know once it&#39;s up.&lt;br&gt;&lt;br&gt;Last weekend &lt;a href=&#34;http://www.ivercore.com/&#34; target=&#34;_blank&#34;&gt;Philip&lt;/a&gt;, &lt;a href=&#34;http://www.pedropimentel.com/&#34; target=&#34;_blank&#34;&gt;Pedro&lt;/a&gt; and myself got together for this year&#39;s &lt;a href=&#34;http://railsrumble.com/&#34; target=&#34;_blank&#34;&gt;Rails Rumble&lt;/a&gt;.&lt;br&gt;&lt;br&gt;We haven&#39;t had really decided what to do until a few days before the competition, but I had this really simple idea and decided to go with it. Seems people liked it, given a few positive comments we received.&lt;br&gt;&lt;br&gt;So, after 48 hours - which were not used to work full-time in the application - &lt;a href=&#34;http://birdwatcher.r09.railsrumble.com/&#34;&gt;The Bird Watcher&lt;/a&gt; was born.&lt;br&gt;&lt;br&gt;&lt;a href=&#34;http://birdwatcher.r09.railsrumble.com/&#34;&gt;The Bird Watcher&lt;/a&gt; is a simple way to show the world what&#39;s going on on Twitter for any topic you define.  Go ahead and take a look at the website to see a live example.&lt;br&gt;&lt;br&gt;We&#39;re planning to keep the service up after the competition is over and we have some nice features lined up to go live on the next release.&lt;br&gt;&lt;br&gt;In short, it was an interesting weekend and showed me that this team works really well together.&lt;br&gt;&lt;br&gt;Cheers&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>jvm language preferences poll results</title>
      <link>http://leonardoborges.com/writings/2009/07/31/jvm-language-preferences-poll-results/</link>
      <pubDate>Fri, 31 Jul 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/07/31/jvm-language-preferences-poll-results/</guid>
      <description>&lt;p&gt;&#xA;&lt;strong&gt;- Overall results&lt;/strong&gt;&lt;br&gt;&lt;br&gt;First off, I&#39;d like to thank everyone who voted on this poll.&lt;br&gt;With a total of 236 votes, here is the summary of the first two questions:&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Are you currently working with or researching about language alternatives for the JVM? - e.g. JRuby, Scala, Groovy&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#39;http://leonardoborges.com/assets/images/scala_improvements.png&#39;&gt;{% img /assets/images/scala_improvements.png %}&lt;/a&gt;&lt;/em&gt;&lt;br&gt;&lt;br&gt;Tooling. The majority of comment urge for better tooling and IDE support. That simple.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Others&lt;/strong&gt;&lt;br&gt;&lt;br&gt;People who chose others mentioned &lt;a href=&#34;http://clojure.org/&#34; target=&#34;_blank&#34;&gt;Clojure&lt;/a&gt;, &lt;a href=&#34;http://www.fandev.org/&#34; target=&#34;_blank&#34;&gt;Fan&lt;/a&gt; and &lt;a href=&#34;http://www.jython.org/&#34;&gt;Jython&lt;/a&gt;, with a clear advantage for Clojure.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Disclaimer&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;This poll has no scientific foundations whatsoever and its sole purpose is to summarize the feelings and personal choices of the people who answered it. If you would like the original spreadsheet with the answers, you can find it &lt;a href=&#34;http://spreadsheets.google.com/ccc?key=0AuABB6DyTXV2dHEtZnNwSDhCb2RVOThFcUNaSUhpbEE&amp;amp;hl=en&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and do your own analyzis.&lt;br&gt;&lt;/strong&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>procs lambdas blocks whats the difference</title>
      <link>http://leonardoborges.com/writings/2009/07/22/procs-lambdas-blocks-whats-the-difference/</link>
      <pubDate>Wed, 22 Jul 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/07/22/procs-lambdas-blocks-whats-the-difference/</guid>
      <description>&lt;p&gt;&#xA;Do you know? &lt;br&gt;I didn&#39;t. And started to get annoyed by using these terms interchangeably and not really knowing the difference.&lt;br&gt;&lt;br&gt;There are a few. And they are subtle. I don&#39;t think most of us would ever have problems with it but it&#39;s the kind of information you&#39;ll be glad to know when having those weird behaviors in your code on a Friday at 6:01 pm, just before pushing to production. :)&lt;br&gt;&lt;br&gt;I guess blocks are the most widely used term in the ruby community and there is little mistake on when to use it:&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;[1,2,3].each do |x|&lt;br&gt;  puts x*2&lt;br&gt;end&lt;/pre&gt;&lt;br&gt;The code between &lt;strong&gt;do&lt;/strong&gt; and &lt;strong&gt;end&lt;/strong&gt; is a &lt;strong&gt;&lt;em&gt;block&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;What&#39;s important to keep in mind is that Procs behave like blocks whereas lambdas behave like methods. To understand what that means, I highlighted a couple of examples:&lt;br&gt;&lt;br&gt;&lt;strong&gt;- The return keyword&lt;/strong&gt;&lt;br&gt;&lt;br&gt;I mentioned Procs behave just like blocks and as such, the return keyword abide to the same rules. This means, for instance, that the latest puts statement on the following code snippet, will never run:&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;def my_proc(x)&lt;br&gt;  p = Proc.new { puts x*2; return }&lt;br&gt;  p.call&lt;br&gt;  puts &#34;After calling proc&#34; #This never gets called&lt;br&gt;end&lt;br&gt;my_proc(10)&lt;br&gt;&gt;&gt;20&lt;/pre&gt;&lt;br&gt;For blocks - and procs-, return means &#34;return from the calling method&#34;, my_proc in this case. That&#39;s why you don&#39;t get to see the output of the puts statement.&lt;br&gt;&lt;br&gt;On the other hand, in the lambda&#39;s example, we get the opposite behavior:&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;def my_lambda(x)&lt;br&gt;  p = lambda { puts x*2; return }&lt;br&gt;  p.call&lt;br&gt;  puts &#34;After calling proc&#34; #This time, we reach this point&lt;br&gt;end&lt;br&gt;my_lambda(10)&lt;br&gt;&gt;&gt;20&lt;br&gt;&gt;&gt;After calling proc&lt;/pre&gt;&lt;br&gt;Here, return says &#34;return from the enclosing iterator&#34;, which, in this case, just returns from the block and continnues the execution of the my_lambda method.&lt;br&gt;&lt;br&gt;&lt;strong&gt;- Argument assignment&lt;/strong&gt;&lt;br&gt;&lt;br&gt;On to this second difference, procs and lambdas get more interesting when you can call them with arguments. And that&#39;s when another subtle difference between them comes in.&lt;br&gt;&lt;br&gt;I&#39;ll start again with a proc:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;&lt;br&gt;  p = Proc.new { |x,y| puts x, y}&lt;br&gt;  p.call&lt;br&gt;  &gt;&gt;nil&lt;br&gt;  &gt;&gt;nil &lt;br&gt;&lt;br&gt;  p.call(1)&lt;br&gt;  &gt;&gt;1&lt;br&gt;  &gt;&gt;nil&lt;br&gt;&lt;br&gt;  p.call(1,2)&lt;br&gt;  &gt;&gt;1&lt;br&gt;  &gt;&gt;2&lt;br&gt;&lt;br&gt;  p.call(1,2,3)&lt;br&gt;  &gt;&gt;1&lt;br&gt;  &gt;&gt;2&lt;br&gt;&lt;br&gt;  p.call([1,2])&lt;br&gt;  &gt;&gt;1&lt;br&gt;  &gt;&gt;2&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;See how procs are flexible? They basically won&#39;t complain if you do not provide parameters, provide extra parameters or even send an array as an argument where, as seen in the code above, it unpacks the array and assign its values to the correct variables.&lt;br&gt;&lt;br&gt;As you&#39;re probably guessing, lambdas behave like methods and are much less flexible:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;&lt;br&gt;  l = lambda { |x,y| puts x, y}&lt;br&gt;  l.call&lt;br&gt;  &gt;&gt;ArgumentError: wrong number of arguments (0 for 2)&lt;br&gt;&lt;br&gt;  l.call(1)&lt;br&gt;  &gt;&gt;ArgumentError: wrong number of arguments (1 for 2)&lt;br&gt;&lt;br&gt;  l.call(1,2)&lt;br&gt;  &gt;&gt;1&lt;br&gt;  &gt;&gt;2&lt;br&gt;&lt;br&gt;  l.call(1,2,3)&lt;br&gt;  &gt;&gt;ArgumentError: wrong number of arguments (3 for 2)&lt;br&gt;&lt;br&gt;  l.call([1,2])&lt;br&gt;  &gt;&gt;ArgumentError: wrong number of arguments (1 for 2)&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p/&gt;&lt;p/&gt;&lt;br&gt;&lt;strong&gt;Ruby 1.9 tip&lt;/strong&gt;&lt;br&gt;Despite its name, Kernel.proc returns a lambda in Ruby 1.8. This has been fixed in Ruby 1.9. You actually get a Proc back.&lt;br&gt;&lt;br&gt;- Reference&lt;br&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0596516177?ie=UTF8&amp;tag=leonaborge-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596516177&#34;&gt;The Ruby Programming Language&lt;/a&gt;&lt;img src=&#34;http://www.assoc-amazon.com/e/ir?t=leonaborge-20&amp;l=as2&amp;o=1&amp;a=0596516177&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - A must have for any Ruby developer.&lt;br&gt; &lt;br&gt;&lt;script type=&#34;text/javascript&#34; src=&#34;http://www.assoc-amazon.com/s/link-enhancer?tag=leonaborge-20&amp;o=1&#34;&gt;&lt;br&gt;&lt;/script&gt;&lt;br&gt;&lt;noscript&gt;&lt;br&gt;    &lt;img src=&#34;http://www.assoc-amazon.com/s/noscript?tag=leonaborge-20&#34; alt=&#34;&#34; /&gt;&lt;br&gt;&lt;/noscript&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>helping the jruby effort debugging the source</title>
      <link>http://leonardoborges.com/writings/2009/06/14/helping-the-jruby-effort-debugging-the-source/</link>
      <pubDate>Sun, 14 Jun 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/06/14/helping-the-jruby-effort-debugging-the-source/</guid>
      <description>&lt;p&gt;Wanna help improve JRuby? Make sure you read &lt;a href=&#34;http://blog.headius.com/2009/05/help-jruby-by-fixing-rubyspecs.html&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt; post by Charles Nutter first. There he explains how to run Ruby specs with JRuby.&lt;/p&gt;&#xA;&lt;p&gt;Start with fixing Ruby specs is a great way to get acquainted with the code. And it&amp;rsquo;s also a important task in order to make sure JRuby is the most complete and compatible ruby implementation out there.&lt;/p&gt;&#xA;&lt;p&gt;But before you get your hands dirty, it will be a lot easier if you can actually debug JRuby&amp;rsquo;s source while fixing any specs - or bugs/features for that matter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>railswaycon jruby internals by ola bini</title>
      <link>http://leonardoborges.com/writings/2009/05/29/railswaycon-jruby-internals-by-ola-bini/</link>
      <pubDate>Fri, 29 May 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/05/29/railswaycon-jruby-internals-by-ola-bini/</guid>
      <description>&lt;p&gt;&#xA;As always I expected a good talk from Ola and once more he delivered it. But this one was different. It might have been even boring to some ruby developers since we saw a fair amount of java code in this presentation. Ola gave us a tour through the main classes that make JRuby possible with a single purpose: so we can check out the code and hack ourselves. You can download his slides &lt;a href=&#34;http://olabini.com/presentations/JRubyInternals.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;If you&#39;ve been following both JRuby and Ola Bini for the past year or so, you&#39;ve noticed the trend and evolution of this alternative - and so far the most complete one - implementation of the ruby language. Specially at conferences.&lt;br&gt;&lt;br&gt;Last year at QCon London, Ola was also talking about JRuby. At Euruko &#39;08, in Prague, &lt;a href=&#34;http://blog.headius.com/&#34; target=&#34;_blank&#34;&gt;Charles Nutter&lt;/a&gt; also talked about it. RailsConf in Berlin also had its share. What all these talks had in common is that they talked about JRuby from a user/developer point of view. They were selling the solution. Convincing people to use it and presenting successful use cases.&lt;br&gt;&lt;br&gt;And as the trend goes on, JRuby is now faced as a true alternative - one that we, btw, believe here at the company as we&#39;re &lt;strong&gt;actively using it&lt;/strong&gt; - and it seems that now the call is for help. Help to make JRuby an even more complete and overall better ruby implementation. Charles&#39; &lt;a href=&#34;http://blog.headius.com/2009/05/help-jruby-by-fixing-rubyspecs.html&#34;&gt;call for help&lt;/a&gt; was a great step. As he states, it&#39;s a good way to get your feet wet. I answered the call and am hacking JRuby myself, having already submitted a couple of patches. Perhaps this was the reason for which I enjoyed the talk the  most. I was already familiar with some of the structure and classes in JRuby.&lt;br&gt;&lt;br&gt;There were 2 more talks about JRuby: &lt;strong&gt;The Pleasure and Pain of Migrating to jRuby&lt;/strong&gt;, by &lt;a href=&#34;http://twitter.com/stevenbristol&#34; target=&#34;_blank&#34;&gt;Steven Bristol&lt;/a&gt; and &lt;strong&gt;Integrating Enterprise Java with JRuby and Rails&lt;/strong&gt;, &lt;a href=&#34;http://twitter.com/malagant&#34; target=&#34;_blank&#34;&gt;Michael Johann&lt;/a&gt;. Unfortunately only the first one was a real case experience, where Steven walked through the problems he faced integrating JRuby with an existing java project. Interesting insights.&lt;br&gt;&lt;br&gt;Michael Johann basically presented a short tutorial on how to integrate rails with EJB3 which, albeit interesting, failed to address issues faced on real life projects, like dependency management. Issues which we have already addressed in a very cool way here and I plan to share it soon. Still deciding how though...&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails readable test names run individual tests from the console</title>
      <link>http://leonardoborges.com/writings/2009/05/16/rails-readable-test-names-run-individual-tests-from-the-console/</link>
      <pubDate>Sat, 16 May 2009 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2009/05/16/rails-readable-test-names-run-individual-tests-from-the-console/</guid>
      <description>&lt;p&gt;&#xA;As you probably know, since rails 2.1 you can write test methods in the following format:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;ruby&#34;&gt;&lt;br&gt;test &#34;hotel should return its permalink&#34; do&lt;br&gt;  #your test code here&lt;br&gt;end&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Which is great, as the test name becomes much more clear. But you can&#39;t simply run this test easily from the command line. You&#39;d have to run something like:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ ruby your_test_file.rb -n test_hotel_should_return_its_permalink&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;It annoys me. And it&#39;s not practical either to make the test fail just so you can get the test&#39;s real name.&lt;br&gt;I wanted to be able to just copy and paste the readable name in the console and have Test::Unit do the conversion and run it for me, like this:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ ruby your_test_file.rb -n &#34;hotel should return its permalink&#34;&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;So I created &lt;a href=&#34;http://github.com/leonardoborges/readable_test_names_runner/tree/master&#34; target=&#34;_blank&#34;&gt;readable_test_names_runner&lt;/a&gt;. It&#39;s a tiny rails plugin that adds this feature for you.&lt;br&gt;&lt;br&gt;Enjoy.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails performance scripts profiler benchmarker</title>
      <link>http://leonardoborges.com/writings/2008/11/20/rails-performance-scripts-profiler-benchmarker/</link>
      <pubDate>Thu, 20 Nov 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/11/20/rails-performance-scripts-profiler-benchmarker/</guid>
      <description>&lt;p&gt;&#xA;There are several ways you can measure your rails application&#39;s performance. The techniques range from filling your code with &#34;puts&#34; statements - :p - to fancy ones like &lt;a href=&#34;http://www.newrelic.com/&#34;&gt;NewRelic&lt;/a&gt; - which is quite nice, I must say.&lt;br&gt;&lt;br&gt;But what many people don&#39;t know is that rails ships with a handful of scripts to help you out. One of which is called &lt;strong&gt;profiler&lt;/strong&gt;, located under your application&#39;s &lt;strong&gt;scripts/performance&lt;/strong&gt; directory.&lt;br&gt;&lt;br&gt;By default it uses the standard ruby profiler but if you want more speed - and additional reporting options - , consider installing the &lt;a href=&#34;http://ruby-prof.rubyforge.org/&#34;&gt;ruby-prof&lt;/a&gt; gem.&lt;br&gt;&lt;br&gt;So if you execute it without params, you&#39;ll get a clue of how it works:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ script/performance/profiler&lt;br&gt;Usage: ./script/performance/profiler &#39;Person.expensive_method(10)&#39; [times] [flat|graph|graph_html]&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Pretty self explanatory, right?&lt;br&gt;&lt;br&gt;As a sample code, I have in my rails app a dumb model with a really dumb method I wanna profile:&lt;br&gt;&lt;br&gt;&#xA;&lt;div class=&#34;code&#34;&gt;&#xA;  &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;  class Article&#xA;    def self.find_all_with_delay&#xA;      sleep 10&#xA;      self.find(:all)&#xA;    end&#xA;  end&#xA;  &lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;br&gt;&lt;br&gt;Clearly this method doesn&#39;t perform well and is a bottle neck in our super application! But let&#39;s see what rails&#39; profiler tells us:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34; line=&#34;1&#34;&gt;&lt;br&gt;$ script/performance/profiler &#39;Article.find_all_with_delay&#39; 1 graph &gt; text_graph.perf&lt;br&gt;Loading Rails...&lt;br&gt;Using the ruby-prof extension.&lt;br&gt;Thread ID: 109440&lt;br&gt;Total Time: 10.147995&lt;br&gt;&lt;br&gt;  %total   %self     total      self      wait     child            calls   Name&lt;br&gt;--------------------------------------------------------------------------------&lt;br&gt; 100.00%   0.00%     10.15      0.00      0.00     10.15                1     Global#[No method] (/Users/leo/projects/test/vendor/rails/railties/lib/commands/performance/profiler.rb:24}  /Users/leo/projects/test/vendor/rails/railties/lib/commands/performance/profiler.rb:24&lt;br&gt;                     10.15      0.00      0.00     10.15              1/1     Object#profile_me&lt;br&gt;--------------------------------------------------------------------------------&lt;br&gt;                     10.15      0.00      0.00     10.15              1/1     Global#[No method]&lt;br&gt; 100.00%   0.00%     10.15      0.00      0.00     10.15                1     Object#profile_me ((eval):1}  (eval):1&lt;br&gt;                      0.00      0.00      0.00      0.00              1/1     Class#const_missing&lt;br&gt;                     10.15      0.00      0.00     10.15              1/1     &lt;Class::Article(id: integer, name: string, content: string, created_at: datetime, &lt;/p&gt;</description>
    </item>
    <item>
      <title>merb turns 10 and started driving me crazy</title>
      <link>http://leonardoborges.com/writings/2008/11/18/merb-turns-10-and-started-driving-me-crazy/</link>
      <pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/11/18/merb-turns-10-and-started-driving-me-crazy/</guid>
      <description>&lt;p&gt;&#xA;As you may already know, &lt;a href=&#34;http://www.merbivore.com/&#34;&gt;Merb&lt;/a&gt; turned 1.0 a while ago and I decided to resume my studies to learn the framework.&lt;br&gt;&lt;br&gt;So I just built a new app with a few resources and fired the migration scripts:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ rake db:automigrate&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;And this is what I got:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;Loading init file from /Users/leo/projects/merb/my-first-app/config/init.rb&lt;br&gt;Loading /Users/leo/projects/merb/my-first-app/config/environments/development.rb&lt;br&gt; ~ Connecting to database...&lt;br&gt;/opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core/adapters/data_objects_adapter.rb:137:in `initialize&#39;: wrong number of arguments (8 for 1) (ArgumentError)&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core/adapters/data_objects_adapter.rb:137:in `new&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core/adapters/data_objects_adapter.rb:137:in `normalize_uri&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core/adapters/abstract_adapter.rb:44:in `initialize&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core/adapters/data_objects_adapter.rb:159:in `initialize&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core.rb:157:in `new&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/dm-core-0.9.6/lib/dm-core.rb:157:in `setup&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb_datamapper-1.0/lib/merb/orms/data_mapper/connection.rb:44:in `setup_connections&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb_datamapper-1.0/lib/merb/orms/data_mapper/connection.rb:27:in `connect&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb_datamapper-1.0/lib/merb_datamapper.rb:17:in `run&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb-core-1.0/lib/merb-core/bootloader.rb:99:in `run&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb-core-1.0/lib/merb-core/server.rb:172:in `bootup&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb-core-1.0/lib/merb-core/server.rb:42:in `start&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb-core-1.0/lib/merb-core.rb:169:in `start&#39;&lt;br&gt;&#x9;from /opt/local/lib/ruby/gems/1.8/gems/merb-core-1.0/bin/merb:11&lt;br&gt;&#x9;from /opt/local/bin/merb:19:in `load&#39;&lt;br&gt;&#x9;from /opt/local/bin/merb:19&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Lovely, isn&#39;t it?  &lt;br&gt;After a fair amount of googling around it turns out that there seems to be a problem with the URI parser &lt;a href=&#34;http://www.merbivore.com/&#34;&gt;Merb&lt;/a&gt; uses underneath, called &lt;a href=&#34;http://addressable.rubyforge.org/&#34;&gt;Addressable&lt;/a&gt;.&lt;br&gt;&lt;br&gt;As of the installation of Merb 1.0, the installed version of this library was 2.0.0.&lt;br&gt;The solution? Install a older Addressable version:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;$ sudo gem uninstall addressable&lt;br&gt;&lt;br&gt;You have requested to uninstall the gem:&lt;br&gt;&#x9;addressable-2.0.0&lt;br&gt;dm-core-0.9.6 depends on [addressable (&gt;= 1.0.4)]&lt;br&gt;data_objects-0.9.6 depends on [addressable (&gt;= 1.0.3)]&lt;br&gt;If you remove this gems, one or more dependencies will not be met.&lt;br&gt;Continue with Uninstall? [Yn]  Y&lt;br&gt;Successfully uninstalled addressable-2.0.0&lt;br&gt;&lt;br&gt;$ sudo gem install addressable -v 1.0.4&lt;br&gt;Successfully installed addressable-1.0.4&lt;br&gt;1 gem installed&lt;br&gt;Installing ri documentation for addressable-1.0.4...&lt;br&gt;Installing RDoc documentation for addressable-1.0.4...&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;I haven&#39;t figured out the reason for this issue, so please do share if you know. I&#39;ll be glad to update the post. :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>understanding ruby threads</title>
      <link>http://leonardoborges.com/writings/2008/10/28/understanding-ruby-threads/</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/10/28/understanding-ruby-threads/</guid>
      <description>&lt;p&gt;&#xA;This post is just to clarify some confusion I&#39;ve noticed reading some posts around the web. There is some misunderstanding of the differences between Ruby 1.8 and Ruby 1.9 regarding threads. And the difference between them and JRuby.&lt;br&gt;&lt;br&gt;So I decided to write this small summary:&lt;br&gt;&lt;br&gt;&lt;strong&gt;Ruby 1.8&lt;/strong&gt; - Supports only &lt;a href=&#34;http://en.wikipedia.org/wiki/Green_threads&#34;&gt;Green Threads&lt;/a&gt;&lt;br&gt;&lt;br&gt;This means that the ruby interpreter has its own scheduler. No matter how many threads you create in your ruby program, there will be only one native thread on your OS. Therefore, your program cannot take advantage of multiple core environments.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Ruby 1.9&lt;/strong&gt; - Supports native threads (GIL)&lt;br&gt;&lt;br&gt;Ruby 1.9 adopted &lt;a href=&#34;http://www.atdot.net/yarv/&#34;&gt;YARV&lt;/a&gt; as the new VM implementation, which supports native threads. This means that now your ruby programs can take advantage of multiple core environments, but no truly parallel execution is achieved.&lt;br&gt;&lt;br&gt;The catch is GIL - Global Interpreter Lock - and it means that each ruby thread runs on its own native thread, but only one of them can be executed at a time.&lt;br&gt;&lt;br&gt;&lt;strong&gt;JRuby&lt;/strong&gt; - Ruby 1.8 compatible&lt;br&gt;&lt;br&gt;I think this is the easy part. JRuby runs on the Java VM, which supports native threads and parallel execution.&lt;br&gt;&lt;br&gt;On this environment, ruby threads are java threads.&lt;br&gt;&lt;br&gt;&lt;strong&gt;The future&lt;/strong&gt;&lt;br&gt;&lt;br&gt;There doesn&#39;t seem to be any decision about what&#39;s gonna happen on the next versions of Ruby. At least to the extent of my research. But this is today&#39;s snapshot of Ruby threads and I hope it&#39;ll be useful to some folks.&lt;br&gt;&lt;br&gt;c u around&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>dont use rexml i mean it</title>
      <link>http://leonardoborges.com/writings/2008/10/08/dont-use-rexml-i-mean-it/</link>
      <pubDate>Wed, 08 Oct 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/10/08/dont-use-rexml-i-mean-it/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://www.germane-software.com/software/rexml/&#34;&gt;REXML&lt;/a&gt; is the standard XML processing library for Ruby. It&#39;s on Ruby&#39;s core and is terribly &lt;strong&gt;slow&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;Yeah, I know it&#39;s pretty simple to use, got a nice interface and, again, it&#39;s just there. And it is a good library, for most things. But if you, as me, came to a point that processing XML is taking 50% of the time to render a rails action, it&#39;s time to change.&lt;br&gt;&lt;br&gt;My tip? Use &lt;a href=&#34;http://libxml.rubyforge.org/&#34;&gt;libxml&lt;/a&gt; instead. The numbers on their home page speak for themselves. Try it yourself, you won&#39;t be disappointed. And I&#39;m really happy with the performance increase on our app.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>railsconf europe 2008 impressions and highlights</title>
      <link>http://leonardoborges.com/writings/2008/09/09/railsconf-europe-2008-impressions-and-highlights/</link>
      <pubDate>Tue, 09 Sep 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/09/09/railsconf-europe-2008-impressions-and-highlights/</guid>
      <description>&lt;p&gt;&#xA;I&#39;m back in Madrid again after the RailsConf and I think it&#39;s time to say something about it. :)&lt;br&gt;&lt;br&gt;First off, the infrastructure provided by the conference was really great. The rooms, WiFi connection, food...Â  Really well organized.&lt;br&gt;&lt;br&gt;Now to the sessions, highlights:&lt;br&gt;&lt;br&gt;&lt;strong&gt;Tutorials (Tuesday)&lt;/strong&gt;&lt;br&gt;- &lt;a href=&#34;http://nealford.com/downloads/Ford-Farley_Meta_programming_ruby-tutorial.pdf&#34;&gt;Meta-programming Ruby for fun and profit&lt;/a&gt; (Neal Ford, Patrick Farley)&lt;br&gt;The old and good techniques that made Ruby so powerful. Here Neal and Patrick walked us through the main tricks to meta programming like open classes - and conditionally open them - , dynamically define methods, sending messages to objects and how Ruby can help test your Java code in a much easier way.&lt;br&gt;&lt;br&gt;I&#39;ve put the link to the slides but honestly I don&#39;t think they&#39;re too much useful without the talking.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Sessions (Wednessday)&lt;/strong&gt;&lt;br&gt;- EC2, MapReduce and Distributed processing (&lt;a href=&#34;http://railspikes.com&#34;&gt;Jonathan Dahl&lt;/a&gt;)&lt;br&gt;Jonathan explained the theory behind &lt;a href=&#34;http://en.wikipedia.org/wiki/Mapreduce&#34;&gt;MapReduce&lt;/a&gt; using very simple ruby examples, providing the basics on how to distribute and paralelize tasks accross multiple machines.&lt;br&gt;&lt;br&gt;He also introduced &lt;a href=&#34;http://hadoop.apache.org/core/&#34;&gt;Hadoop&lt;/a&gt;, a platform built in Java that &#34;lets one easily write and run     applications that process vast amounts of data&#34;. What I liked the most was the simplicity he explained this subject. As of today, his presentation is not available online. Stay tuned as I&#39;m gonna update this post with the links, as soon as they&#39;re available.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Sessions (Thursday)&lt;/strong&gt;&lt;br&gt;- &lt;a href=&#34;http://nealford.com/downloads/conferences/canonical/Neal_Ford-Debugging_and_Testing_the_Web_Tier.zip&#34;&gt;Debugging &amp;amp; Testing the Web Tier&lt;/a&gt; (&lt;a href=&#34;http://nealford.com&#34;&gt;Neal Ford&lt;/a&gt;)&lt;br&gt;If you&#39;ve been concerned about testing your app&#39;s web tier lately, this presentation would probably not show you anything new. Neal talks about the need to debug and test javascript behaviour accross multiple browsers, using tools like &lt;a href=&#34;http://getfirebug.com/&#34;&gt;Firebug&lt;/a&gt;, &lt;a href=&#34;http://www.jsunit.net/&#34;&gt;JSUnit&lt;/a&gt; and &lt;a href=&#34;http://selenium.openqa.org/&#34;&gt;Selenium&lt;/a&gt;. If you have no idea about what these tools are, please stop now and go evaluate them!&lt;br&gt;&lt;br&gt;We are pretty concerned about testing on my actual job, but selenium tests can be a pain sometimes - a.k.a extremely slow. And what ends up happening is that they are forgotten. Developers only run the test suite if it&#39;s not painful and it&#39;s lightning fast. Here&#39;s is where the highlight for this session comes: &lt;a href=&#34;http://www.thefrontside.net/crosscheck&#34;&gt;CrossCheck&lt;/a&gt;.&lt;br&gt;&lt;br&gt;The idea is to be able to test your javascript code accross multiple browsers without the need to launch them. In fact, you don&#39;t even need a browser installed. The negative point is that it&#39;s kinda fallen behind because now you can only test older versions of browsers. But since the project is getting a lot of traction, I&#39;m pretty sure this will be solved soon.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;&lt;br&gt;My overall impression of the other sessions I attended is that some speakers just didn&#39;t have time to properly prepare themselves, what made me think this years&#39;s RailsConf wasn&#39;t all that I expected.&lt;br&gt;&lt;br&gt;But I also met interesting people and after all one of the key points in a conference is networking. :)&lt;br&gt;&lt;br&gt;Definitely worth it though. And that&#39;s why I took the time to provide this highlights.&lt;br&gt;&lt;br&gt;c u soon&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>railsconf europe 2008 heading to berlin</title>
      <link>http://leonardoborges.com/writings/2008/08/30/railsconf-europe-2008-heading-to-berlin/</link>
      <pubDate>Sat, 30 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/08/30/railsconf-europe-2008-heading-to-berlin/</guid>
      <description>&lt;p&gt;&#xA;The title says it already.&lt;br&gt;&lt;br&gt;On monday I&#39;ll be going to Berlin to attend this yearÂ´s &lt;a href=&#34;http://en.oreilly.com/railseurope2008/public/content/home&#34;&gt;RailsConf&lt;/a&gt;.&lt;br&gt;&lt;br&gt;This will be my first one and of course my expectations are pretty high!&lt;br&gt;&lt;br&gt;As usual, after the conference I&#39;ll try and give a summary of what happened there, providing as much content as I can.&lt;br&gt;&lt;br&gt;Anyone else&#39;s going??? :)&lt;br&gt;&lt;br&gt;C u there!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>mac os x getting mysql and rails to work</title>
      <link>http://leonardoborges.com/writings/2008/08/28/mac-os-x-getting-mysql-and-rails-to-work/</link>
      <pubDate>Thu, 28 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/08/28/mac-os-x-getting-mysql-and-rails-to-work/</guid>
      <description>&lt;p&gt;&#xA;So I couldn&#39;t resist and bought myself a MacBook Pro! It&#39;s my first week with my new toy and I&#39;m really enjoying it.&lt;br&gt;&lt;br&gt;But I need to do something useful with it so I started to prepare it to be my new development platform, starting with Ruby/Rails + MySQL: Here is where the fun begins!&lt;br&gt;&lt;br&gt;After I installed both Rails and MySQL, I fired up a terminal an typed:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;sudo gem install mysql&lt;/pre&gt;&lt;br&gt;...and here is what u get&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;ERROR: Failed to build gem native extension.&lt;/pre&gt;&lt;br&gt;If you google this error you will find a couple solutions and this is the one that worked for me:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;ARCHFLAGS=&#34;-Os -arch x86_64 -fno-common&#34;&lt;br&gt;sudo gem install mysql -- --with-mysql-dir=/usr/local/mysql&lt;br&gt;--with-mysql-config=/usr/local/mysql/bin/mysql_config&lt;/pre&gt;&lt;br&gt;Now, confident enough, I created a sample rails app and tried to create the development database:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;leo$ rake db:create (in /Users/leo/projects/test)&lt;br&gt;dyld: lazy symbol binding failed: Symbol not found: _mysql_init&lt;/pre&gt;&lt;br&gt;Doesn&#39;t look happy yet huh? This took me a while to figure out but it turned out to be fairly simple.&lt;br&gt;I have no idea why but after I installed the gem I had the file mysql.bundle in two different places:&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;/Library/Ruby/Gems/1.8/gems/mysql-2.7/lib/mysql.bundle&lt;br&gt;/Library/Ruby/Gems/1.8/gems/mysql-2.7/mysql.bundle&lt;/pre&gt;&lt;br&gt;The solution was to remove the first copy of the file. Now everything is working fine at this end!&lt;br&gt;I really hope this is useful to someone!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails vulnerability on rexml</title>
      <link>http://leonardoborges.com/writings/2008/08/24/rails-vulnerability-on-rexml/</link>
      <pubDate>Sun, 24 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/08/24/rails-vulnerability-on-rexml/</guid>
      <description>&lt;p&gt;&#xA;REXML, the XML library uses by many ruby apps, including rails, has a vulnerability that requires an immediate patch on whatever rails version you&#39;re using.&lt;br&gt;&lt;br&gt;Details and instructions on the official rails weblog, &lt;a href=&#34;http://weblog.rubyonrails.org/2008/8/23/dos-vulnerabilities-in-rexml&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;But basically, this is what you need to do:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;bash&#34;&gt;&lt;br&gt;gem install rexml-expansion-fix&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Then, require rexml-expansion-fix in your rails&#39;s app environment.rb file.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>why i like ruby 1 alias_method</title>
      <link>http://leonardoborges.com/writings/2008/08/07/why-i-like-ruby-1-alias_method/</link>
      <pubDate>Thu, 07 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/08/07/why-i-like-ruby-1-alias_method/</guid>
      <description>&lt;p&gt;&#xA;So you found yourself in the need to override a method but still count on it&#39;s old behaviour?&lt;br&gt;&lt;br&gt;No problem! Override it with your new code, call &lt;strong&gt;super&lt;/strong&gt; and.... Uh oh!! Suddenly this turned into a problem... Let me give some more context.&lt;br&gt;&lt;br&gt;I was testing &lt;a href=&#34;http://ferret.davebalmain.com/trac/wiki&#34;&gt;Ferret&lt;/a&gt; (and the &lt;a href=&#34;http://projects.jkraemer.net/acts_as_ferret/&#34;&gt;acts_as_ferret&lt;/a&gt; plugin) in a project to provide full text search capabilities to our models. One of the things the plugin does is to add a new method to ActiveRecord, called &lt;em&gt;find_with_ferret&lt;/em&gt;. That way, every model can use it. Great!&lt;br&gt;&lt;br&gt;So I thought that would make sense for me to remove all &lt;a href=&#34;http://en.wikipedia.org/wiki/Diacritics&#34;&gt;diatrictics&lt;/a&gt; from the input text before letting ferret do its job. You know, like removing &lt;a href=&#34;http://en.wikipedia.org/wiki/Umlaut_%28diacritic%29&#34;&gt;umlauts&lt;/a&gt; and all that.&lt;br&gt;&lt;br&gt;I could do that by overriding this method with code to remove the undesired chars and then call its older version to finally do the search - something like calling super, but not quite. And I didn&#39;t want my models to inherit from anything else than ActiveRecord::Base. That wouldn&#39;t make any sense.&lt;br&gt;&lt;br&gt;&lt;a href=&#34;http://www.ruby-doc.org/core/classes/Module.html#M000395&#34;&gt;alias_method&lt;/a&gt; to the rescue!&lt;br&gt;&lt;br&gt;You know that to redefine a method in an existing class you can open it up and rewrite it. But since you don&#39;t wanna loose the behaviour provided by the original method, this is how you can achieve this:&lt;br&gt;&lt;br&gt;&lt;pre lang=&#34;ruby&#34; line=&#34;1&#34;&gt;&lt;br&gt;module ActiveRecord&lt;br&gt;  class Base&lt;br&gt;    alias_method :find_with_ferret_original, :find_with_ferret&lt;br&gt;&lt;br&gt;    def find_with_ferret(q, options = {}, find_options = {})&lt;br&gt;      remove_diatrictics!(q)&lt;br&gt;      find_with_ferret_original(q, options, find_options)&lt;br&gt;    end&lt;br&gt;  end&lt;br&gt;end&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;And you&#39;re good to go. On line 3 you&#39;re just giving the original method an alias, making a copy of it.&lt;br&gt;&lt;br&gt;Then you redefine it the way you like and on line 6 you call the old version to make sure u still got the same behaviour.  &lt;br&gt;Now all my models can benefit of this change without requiring them to call another method nor inherit from another class.&lt;br&gt;&lt;br&gt;Cool, huh? :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>the biggest rails event in latin america</title>
      <link>http://leonardoborges.com/writings/2008/08/04/the-biggest-rails-event-in-latin-america/</link>
      <pubDate>Mon, 04 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/08/04/the-biggest-rails-event-in-latin-america/</guid>
      <description>&lt;p&gt;&#xA;Behold latin american railers!&lt;br&gt;&lt;br&gt;This year we will have the &lt;a href=&#34;http://www.locaweb.com.br/railssummit/&#34;&gt;Rails Summit Latin America&lt;/a&gt; on October, 15th and 16th, in SÃ£o Paulo, Brazil.&lt;br&gt;&lt;br&gt;It&#39;s by far the biggest Rails event we&#39;ve ever had, including many of the speakers that were present at &lt;a href=&#34;http://en.oreilly.com/rails2008/public/content/home&#34;&gt;RailsConf&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;a href=&#34;http://akitaonrails.com/&#34;&gt;FÃ¡bio Akita&lt;/a&gt; is also one of the speakers and provides more details on his &lt;a href=&#34;http://akitaonrails.com/2008/8/1/largada-para-o-maior-evento-de-rails-da-am-rica-latina&#34;&gt;blog&lt;/a&gt;.&lt;br&gt;&lt;br&gt;If you&#39;re a assumed rails geek don&#39;t miss the opportunity to hear from the big names and to know a beautiful country like Brazil.&lt;br&gt;&lt;br&gt;Oh, btw, if you&#39;re brazilian, like me, you have no excuse to miss this party!&lt;br&gt;&lt;br&gt;Enjoy!!!&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;br&gt;&lt;a href=&#34;http://www.locaweb.com.br/railssummit&#34;&gt;&lt;br&gt;&lt;img src=&#34;http://www.akitaonrails.com/assets/2008/8/1/468x60.gif&#34; alt=&#34;Rails Summit Latin America&#34; title=&#34;Rails Summit Latin America&#34; border=&#34;0&#34; width=&#34;468&#34; height=&#34;60&#34;/&gt;&lt;/a&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>passenger mod_rails and problems with custom apache installation</title>
      <link>http://leonardoborges.com/writings/2008/06/07/passenger-mod_rails-and-problems-with-custom-apache-installation/</link>
      <pubDate>Sat, 07 Jun 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/06/07/passenger-mod_rails-and-problems-with-custom-apache-installation/</guid>
      <description>&lt;p&gt;&#xA;This week we started to test &lt;a href=&#34;http://www.modrails.com/&#34;&gt;mod_rails&lt;/a&gt; in a couple of projects where I work on. One in production.&lt;br&gt;&lt;br&gt;Of course it&#39;s too early for any conclusions, but I just wanted to share a couple of problems you might find when the installer tries to compile the Apache module.&lt;br&gt;&lt;br&gt;In our case, and I believe it is the case of many servers out there, we have a custom Apache installation, what makes the installer not find it and/or not find the Apache Portable Runtime (APR) sometimes.&lt;br&gt;&lt;br&gt;The first one is easy and is documented &lt;a href=&#34;http://www.modrails.com/documentation/Users%20guide.html#specifying_correct_apache_in&#34;&gt;here&lt;/a&gt;. You just seed to export the following environment variable, pointing to your apache installation:&lt;br&gt;&lt;pre&gt;&lt;tt&gt;&lt;tt&gt;export APXS2=/opt/apache2/bin/apxs&lt;br&gt;&lt;/tt&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;br&gt;The second one is a bit tricky but it happened only when I tried to install passenger in another server that had CentOS. In this case, you will also need the following environment variable, pointing to your Apache APR config:&lt;br&gt;&lt;pre&gt;export APR_CONFIG=/usr/local/apache2/bin/&lt;span class=&#34;nfakPe&#34;&gt;apr&lt;/span&gt;-1-config&lt;/pre&gt;&lt;br&gt;It took me a fair amount of time googling around to find this answer, so I hope it&#39;ll be useful for someone. :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>euruko 2008 materials available</title>
      <link>http://leonardoborges.com/writings/2008/05/14/euruko-2008-materials-available/</link>
      <pubDate>Wed, 14 May 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/05/14/euruko-2008-materials-available/</guid>
      <description>&lt;p&gt;&#xA;As some of you know &lt;a href=&#34;http://leonardoborges.com/writings/2008/03/25/euruko-2008-european-rubyconf-prague/&#34;&gt;I went&lt;/a&gt; to the &lt;a href=&#34;http://www.euruko2008.org&#34;&gt;European Ruby Conf in Prague&lt;/a&gt;, this year.&lt;br&gt;&lt;br&gt;The event was awesome and it&#39;s good to know they finally made available the majority of the slides, &lt;a href=&#34;http://www.euruko2008.org/pages/2-program&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;They also published &lt;a href=&#34;http://www.avc-cvut.cz/avc.php?id=6830&amp;amp;language=en_US&#34;&gt;Matz&#39;s keynote&lt;/a&gt;, and more videos from the conference are being edited right now, so stay tuned to their home page!&lt;br&gt;&lt;br&gt;Enjoy!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>a couple of things from here</title>
      <link>http://leonardoborges.com/writings/2008/05/10/a-couple-of-things-from-here/</link>
      <pubDate>Sat, 10 May 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/05/10/a-couple-of-things-from-here/</guid>
      <description>&lt;p&gt;&#xA;It&#39;s been some time since my last post but here I am! Where? In Spain, of course! Having a great time, I must say.&lt;br&gt;&lt;br&gt;I arrived last week in Madrid and the past 2 weeks before that I spent basically packing my stuff. There is still some paperwork going on but everything is flowing well.&lt;br&gt;&lt;br&gt;Besides this little feedback, I was reading this week&#39;s issue of the excellent series &lt;a href=&#34;http://antoniocangiano.com/2008/05/05/this-week-in-ruby-may-5-2008/&#34;&gt;This Week In Ruby&lt;/a&gt;, from my friend &lt;a href=&#34;http://antoniocangiano.com/&#34;&gt;Antonio Cangiano&lt;/a&gt;. I found something quite interesting, a plugin called &lt;a href=&#34;http://hobocentral.net/hobofields/&#34;&gt;HoboFields&lt;/a&gt;.&lt;br&gt;&lt;br&gt;One of the things that bothers me in rails is the fact that by looking at your model classes, you can&#39;t tell the fields you have there. Sure, you can look at the migration script. Yeah, you can also load the development environment and inspect the object. It&#39;s a pain in the @zz! But this is the way ActiveRecord works...&lt;br&gt;&lt;br&gt;Other ORM solutions like &lt;a href=&#34;http://datamapper.org/&#34;&gt;DataMapper&lt;/a&gt;, allows you to define the fields directly in the class. It&#39;s a much cleaner and clear way to maintain your models. And you get to know what properties you have just by looking at your classes.&lt;br&gt;&lt;br&gt;That&#39;s exactly what HoboFields adds to ActiveRecord.&lt;br&gt;&lt;br&gt;You define your properties and its types straight into your model class, and the plugin creates the migration scripts for you. Coming from a java world my self, I find it rather interesting, useful and it also reminds me of the way &lt;a href=&#34;http://hibernate.org&#34;&gt;Hibernate&lt;/a&gt; works. You define your mappings with anotations in your class and hibernate just generate the schemas from there.&lt;br&gt;&lt;br&gt;It&#39;s worth a try.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>passengermod_rails released</title>
      <link>http://leonardoborges.com/writings/2008/04/14/passengermod_rails-released/</link>
      <pubDate>Mon, 14 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/04/14/passengermod_rails-released/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;http://www.modrails.com/&#34;&gt;Passenger(mod_rails)&lt;/a&gt; has been released.&lt;br&gt;&lt;br&gt;The idea is to ease the pain on rails applications deployment. I tested myself and in less than five minutes I had my application working behind Apache!&lt;br&gt;&lt;br&gt;I&#39;m not going to say much here besides the fact that it seems like a really good option for rails deployment and &lt;a href=&#34;http://www.modrails.com/testimonials.html&#34;&gt;people&lt;/a&gt; have been talking about it already, including &lt;a href=&#34;http://www.loudthinking.com/&#34;&gt;DHH&lt;/a&gt;.&lt;br&gt;&lt;br&gt;But I do recommend a read on the &lt;a href=&#34;http://www.modrails.com/documentation/Architectural%20overview.html&#34;&gt;architecture overview&lt;/a&gt; document. Be sure to read it all, specially the part on &lt;a href=&#34;http://www.modrails.com/documentation/Architectural%20overview.html#concurrent_requests&#34;&gt;handling concurrent requests&lt;/a&gt;.&lt;br&gt;&lt;br&gt;To install, &#34;it doesn&#39;t get easier than&#34; &lt;a href=&#34;http://www.modrails.com/install.html&#34;&gt;that&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Good job guys.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>jruby db2 xquery bug</title>
      <link>http://leonardoborges.com/writings/2008/04/07/jruby-db2-xquery-bug/</link>
      <pubDate>Mon, 07 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/04/07/jruby-db2-xquery-bug/</guid>
      <description>&lt;p&gt;&#xA;&lt;strong&gt;Update&lt;/strong&gt;: Follow up link to this issue on JRuby&#39;s Jira, &lt;a href=&#34;http://jira.codehaus.org/browse/JRUBY-2430&#34;&gt;here&lt;/a&gt;&lt;br&gt;&lt;br&gt;As I told in my last &lt;a href=&#34;http://leonardoborges.com/writings/2008/04/04/qcon-2008-slides-available/&#34;&gt;post&lt;/a&gt;, it was time to give JRuby a serious try. So I took one of our rails projects at work and decided to migrate it to JRuby and see what happens.&lt;br&gt;&lt;br&gt;We heavily use the XML capabilities of DB2 and this was a huge problem. Every query would work just fine through the activerecord-jdbc-adapter - part of the &lt;a href=&#34;http://rubyforge.org/projects/jruby-extras&#34;&gt;JRuby Extras&lt;/a&gt; . But every &lt;strong&gt;X&lt;/strong&gt;query would gracefully &lt;strong&gt;fail&lt;/strong&gt;!&lt;br&gt;&lt;br&gt;After some debugging I got stuck and decided to get JRuby and activerecord-jdbc-adapter&#39;s source to see what was happening.&lt;br&gt;&lt;br&gt;As I could see, it has a bug -in my opinion - at the java part of the code. The jdbc-adapter is a bridge to allow Active Record to talk with databases through native JDBC drivers, so it&#39;s normal that we do have a java part here. At this point, what the code does is to inspect the sql statement sent from ruby and decide if it&#39;s a select, update or insert.&lt;br&gt;&lt;br&gt;I fixed the problem and submitted a &lt;a href=&#34;http://rubyforge.org/tracker/index.php?func=detail&amp;amp;aid=19340&amp;amp;group_id=2014&amp;amp;atid=7859&#34;&gt;patch&lt;/a&gt; to rubyforge. I&#39;m not sure if it&#39;s the best solution or not, but now I got the xQueries working just fine.&lt;br&gt;&lt;br&gt;I&#39;d love to hear from people with similar environments whether this patch works for you or not. I&#39;m sure I didn&#39;t try every possibility.&lt;br&gt;&lt;br&gt;If you wanna try it, just drop me a message (e-mail in the &lt;a href=&#34;http://leonardoborges.com/writings/about/&#34;&gt;About&lt;/a&gt; page) and I can send the pre-compiled jar file - for activerecord-jdbc-0.8&lt;br&gt;&lt;br&gt;You can also just check out the code and compile yourself. ;)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>qcon 2008 slides available</title>
      <link>http://leonardoborges.com/writings/2008/04/04/qcon-2008-slides-available/</link>
      <pubDate>Fri, 04 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/04/04/qcon-2008-slides-available/</guid>
      <description>&lt;p&gt;&#xA;Most of last QCon&#39;s presentations are available for download &lt;a href=&#34;http://jaoo.dk/london-2008/schedule&#34;&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Highlights to Ola Bini&#39;s on &lt;a href=&#34;http://jaoo.dk/london-2008/file?path=/qcon-london-2008/slides/OlaBini_JRuby_Power_on_the_JVM.pdf&#34;&gt;JRuby(pdf)&lt;/a&gt; and Randy Shoup&#39;s on  &lt;a href=&#34;http://jaoo.dk/london-2008/file?path=/qcon-london-2008/slides/RandyShoup_eBaysArchitecturalPrinciples.pdf&#34;&gt;eBay&#39;s architectural principles(pdf)&lt;/a&gt;.&lt;br&gt;&lt;br&gt;And while we&#39;re talking about JRuby, it&#39;s impressive how it&#39;s becoming a recurrent and big subject. Fast. It had its own small space at big event like QCon and in the last Euruko in Prague, we had a presentation by the JRuby Core Developers &lt;a href=&#34;http://headius.blogspot.com/&#34;&gt;Charles Nutter&lt;/a&gt; and &lt;a href=&#34;http://www.bloglines.com/blog/ThomasEEnebo&#34;&gt;Thomas Enebo&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Big companies are sponsoring JRuby&#39;s development indirectly or directly, like &lt;a href=&#34;http://www.sun.com&#34;&gt;Sun&lt;/a&gt;. And other big companies are endorsing its production ready state, like &lt;a href=&#34;http://www.oracle.com&#34;&gt;Oracle&lt;/a&gt;, which has a publicly available website developed with JRuby On Rails.&lt;br&gt;&lt;br&gt;It&#39;s past the time to give it a serious try...&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>why i like ruby or ruby the language of the lazy programmer</title>
      <link>http://leonardoborges.com/writings/2008/04/01/why-i-like-ruby-or-ruby-the-language-of-the-lazy-programmer/</link>
      <pubDate>Tue, 01 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/04/01/why-i-like-ruby-or-ruby-the-language-of-the-lazy-programmer/</guid>
      <description>&lt;p&gt;&#xA;This is quite funny. A friend, Perl addicted, is now learning Ruby. He really enjoys the language but made a interesting observation: Ruby is a language for lazy programmers!&lt;br&gt;&lt;br&gt;Well, I have to agree... You know, I love saving keystrokes and achieving more by writing less. And this is so true with Ruby.&lt;br&gt;&lt;br&gt;Let me give a really simple example, comparing with java - don&#39;t get me wrong... I love java, specially the platform, but it fits well here since I&#39;ve always been a Java guy.&lt;br&gt;&lt;br&gt;Imagine you have a Phone class with the attributes number and type, which can indicate whether the phone is a land line or a mobile phone. Then you got an array filled with phone classes and you want to narrow it by creating a new array only with mobile phones.&lt;br&gt;&lt;br&gt;In Java, such a class could look very much like this:&lt;br&gt;&lt;pre&gt;&lt;br&gt;public class Phone {&lt;br&gt;  private String number;&lt;br&gt;  private String type;&lt;/code&gt;&lt;br&gt;&lt;br&gt;  public String getNumber() {&lt;br&gt;    return number;&lt;br&gt;  }&lt;br&gt;  public void setNumber(String number) {&lt;br&gt;    this.number = number;&lt;br&gt;  }&lt;br&gt;  public String getType() {&lt;br&gt;    return type;&lt;br&gt;  }&lt;br&gt;  public void setType(String type) {&lt;br&gt;    this.type = type;&lt;br&gt;  }&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Quite simple, isn&#39;t it? But we are telling the compiler many things we actually shouldn&#39;t need to. This class is a java bean and as such, among other things, it needs a pair of getters and setters for each of its attributes.&lt;br&gt;&lt;br&gt;Now, on with our example, the same class, in ruby, looks like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;br&gt;class Phone&lt;br&gt;  attr_accessor :number, :type&lt;br&gt;end&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Yeah, I know the feeling. This class has exactly what we need: the two attributes with its own pairs of getters and setters each. But we didn&#39;t need to inform it in the verbose way Java has teached us. Cleaner, period.&lt;br&gt;&lt;br&gt;Now to the code that actually returns the new array containing only mobile numbers. In java, we can do it in two different ways.&lt;br&gt;Using an ArrayList:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;br&gt;//Create two phone objects, one land line and one mobile&lt;br&gt;...&lt;br&gt;// Add them to an array&lt;br&gt;ArrayList&lt;phone&gt; phones = new ArrayList&lt;phone&gt;();&lt;br&gt;phones.add(land);&lt;br&gt;phones.add(mobile);&lt;br&gt;&lt;br&gt;//Return an array only with mobile numbers:&lt;br&gt;private static ArrayList&lt;phone&gt; selectMobilePhones(ArrayList&lt;phone&gt; phones) {&lt;br&gt;&lt;br&gt;  ArrayList&amp;lt;Phone&amp;gt; mobiles = new ArrayList&amp;lt;Phone&amp;gt;();&lt;br&gt;&lt;br&gt;  for (Phone phone : phones) {&lt;br&gt;    if (phone.getType().equals(&#34;mobile&#34;)) {&lt;br&gt;      mobiles.add(phone);&lt;br&gt;    }&lt;br&gt;  }&lt;br&gt;  return mobiles;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Or using ordinary arrays:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;br&gt;// Assume the same phone objects here&lt;br&gt;...&lt;br&gt;//Add them to the array&lt;br&gt;Phone[] phones = new Phone[]{land, mobile};&lt;br&gt;&lt;br&gt;//Return an array only with mobile numbers:&lt;br&gt;Phone[] mobiles = new Phone[a.length];&lt;br&gt;&lt;br&gt;for (int i = 0; i &amp;lt; a.length; i++) {&lt;br&gt;&lt;br&gt;  if (a[i].getType().equals(&#34;mobile&#34;)) {&lt;br&gt;    mobiles[i] = a[i];&lt;br&gt;  }&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;And you&#39;re good to go. Actually this code with an ArrayList here only looks good thanks to generics. But this is another matter. Let&#39;s take a look at the ruby code that accomplishes de same task:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;br&gt;//Create two phone objects, one land line and one mobile&lt;br&gt;...&lt;br&gt;//Add them to an array&lt;br&gt;phones = [land, mobile]&lt;/code&gt;&lt;br&gt;&lt;br&gt;//Return an array only with mobile numbers:&lt;br&gt;mobiles = phones.select { |phone|&lt;br&gt;   phone.type == &#34;mobile&#34;&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;See the difference? Java is a great language but too verbose at times. This is a really simple example but if you take the same principle to a bigger app... yeah, you see where I&#39;m going.&lt;br&gt;&lt;br&gt;The bottom line... Ruby may be the language of the lazy programmer, as my friend pointed out. But I don&#39;t mind being called lazy as long as I can type less and be more productive. Do you? :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>euruko 2008 european rubyconf prague</title>
      <link>http://leonardoborges.com/writings/2008/03/25/euruko-2008-european-rubyconf-prague/</link>
      <pubDate>Tue, 25 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/03/25/euruko-2008-european-rubyconf-prague/</guid>
      <description>&lt;p&gt;&#xA;On friday I&#39;ll be heading Prague for the &lt;a href=&#34;http://www.euruko2008.org/&#34;&gt;European RubyConf&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Anyone is going? :)&lt;br&gt;&lt;br&gt;Almost 300 attendees already registered for the event. And a few very interesting people will be speaking there like &lt;a href=&#34;http://en.wikipedia.org/wiki/Yukihiro_Matsumoto&#34;&gt;Matz&lt;/a&gt; and &lt;a href=&#34;http://www.loudthinking.com/&#34;&gt;DHH&lt;/a&gt; (this one, through skype).&lt;br&gt;&lt;br&gt;Besides that, the organization staff is scheduling 2 parties, friday and saturday, for the attendees.&lt;br&gt;&lt;br&gt;Networking comes to mind, doesn&#39;t it? I think it will be a great opportunity to meet interesting and bright people.&lt;br&gt;&lt;br&gt;So, see u in Prague!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>qcon 2008 domain specific languages</title>
      <link>http://leonardoborges.com/writings/2008/03/10/qcon-2008-domain-specific-languages/</link>
      <pubDate>Mon, 10 Mar 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/03/10/qcon-2008-domain-specific-languages/</guid>
      <description>&lt;p&gt;&#xA;Today was the first day of the conference and it started with a tutorial about DSL&#39;s with &lt;a href=&#34;http://www.martinfowler.com&#34;&gt;Martin Fowler&lt;/a&gt;, &lt;a href=&#34;http://www.nealford.com/&#34;&gt;Neal Ford&lt;/a&gt; and Rebecca Parsons. We also had as attendants &lt;a href=&#34;http://ola-bini.blogspot.com/&#34;&gt;Ola Bini&lt;/a&gt;, core developer of JRuby, and others. My expectations were pretty high and the presentation didn&#39;t let me down. I&#39;ll try to put here toghether my impressions and some notes I took while I was there.&lt;br&gt;&lt;br&gt;Marting Fowler started discussing what DSL&#39;s are and giving some examples that many of us use in our day to day Job. Like the XML configuration files in the Java world. It is a kind of DSL, it has it&#39;s own keywords and syntax in order to express some information that will be used , for instance, to configure an underlying framework.&lt;br&gt;&lt;br&gt;The problem with XML is that it becomes hard to see the overall behavior behind it. It&#39;s not very fluent to understand the purpose of an XML file just by looking at it for the first time. There is too much &#34;noise&#34;. Things that get into the way of the readability. - &lt;a href=&#34;http://www.yaml.org/&#34;&gt;YAML&lt;/a&gt; files are an much more readable alternatives to XML.&lt;br&gt;&lt;br&gt;The same happens with a standard framework api code.  Let&#39;s take for instance a sample API configuration code written in Java to tackle the domain of hotel reservations. A framework like this could have the following implementation:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;HotelService hotelService = new HotelService();&lt;br&gt;PersonService personService = new HotelService();&lt;/code&gt;&lt;br&gt;&lt;br&gt;Hotel hotel = hotelService.findById(1);&lt;br&gt;Person guest = personService.findById(10) ;&lt;br&gt;&lt;br&gt;Reservation reservation = new Reservation() ;&lt;br&gt;reservation.setFrom(&#34;2008-03-10&#34;) ;&lt;br&gt;reservation.setTo(&#34;2008-03-14&#34;);&lt;br&gt;reservation.setGuests(new Person[]{guest});&lt;br&gt;&lt;br&gt;hotelService.book(hotel, reservation);&lt;br&gt;Of course implementations of this simple example may vary but we can see here some of the readability problems. One approach we could use for that is to develop a Fluent Interface to wrap this API. This was one of the techniques explored during the tutorial and the actual fluent interface could now look somewhat similar with this:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;new Hotel(1)&lt;br&gt;.book()&lt;br&gt;.forGuests({&lt;br&gt;person.find(10)&lt;br&gt;})&lt;br&gt;.rooms(1)&lt;br&gt;.from(&#34;2008-03-10&#34;)&lt;br&gt;.to(&#34;2008-03-10&#34;);&lt;br&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Much more readable, huh?  One of the main benefits of using DSL&#39;s they highlighted in the tutorial is the simplicity of code you can achieve. You can actually show this code to a business person and he can understand it.  This is a kind of &lt;a href=&#34;http://www.martinfowler.com/bliki/InternalDslStyle.html&#34;&gt;internal DSL&lt;/a&gt;.&lt;br&gt;&lt;br&gt;But there is still a bit of noise in this code. The the parenthesis which are not always desirable, and the use of double quotes for dates. But, this is Java code, and Java doesn&#39;t give too much room for you on the DSL subject. Here was when the speakers changed their focus a bit to Ruby. It&#39;s dynamic nature and metaprogramming techniques provides a powerful flexibility that allows for a looser syntax.&lt;br&gt;&lt;br&gt;So in ruby the previous interface could look like this now:&lt;br&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;Hotel.find(1) .book(1.room).forGuests {&lt;br&gt;Person.find(10)&lt;br&gt;}.from(march.10.2008).to(march.10.2008)&lt;br&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;We got rid of the double quotes and the code looks more fluent, like a normal english sentence. I doubt a business guy woudn&#39;t understand what this code is doing. With this, we can get closer to the business guys, with a common vocabulary, and fill the gap between us.&lt;br&gt;&lt;br&gt;This is just one of the ways we could have written this code and is not the actual example used in the tutorial.  The syntax also really depends on how readable you wanna make your code. I&#39;ll provide those later when they release the digital format of the presentation.&lt;br&gt;&lt;br&gt;So one of the flows that the development of an internal DSL can get is to build a framework and define the DSL on top of it. But we should also keep in mind that DSL&#39;s shouldn&#39;t be general purpose programming languages. They should be created to tackle a specific kind of domain problem, so we would have a whole system made of small DSL&#39;s.&lt;br&gt;&lt;br&gt;Another interesting subject that was touched is testing. How do you test DSL&#39;s?&lt;br&gt;The suggested approach, and that I think is quite reasonable, is to have separate tests for the underlying framework and another to test the DSL and its parser you can assure you have the expected behaviour of both parts.&lt;br&gt;&lt;br&gt;This is really just a summary of my thoughts and of what happened there. I&#39;m not going into too much details right now but if you found something too abstract - and it is! ;) - feel free to ask details. I&#39;ll be more than happy to help.&lt;br&gt;&lt;br&gt;This is definetly an interesting subject and now I&#39;ll head to play more with all that. :)&lt;br&gt;&lt;br&gt;PS; This is not the whole presentation, just the best of it from my stand point. Other subjects include External DSL&#39;s which can actually involve you coding Lexers, Parsers and Compilers. It&#39;s usually not worth the hassle. And it&#39;s too complicated anyway, that&#39;s why I left it out from this post.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>openid</title>
      <link>http://leonardoborges.com/writings/2008/02/18/openid/</link>
      <pubDate>Mon, 18 Feb 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/02/18/openid/</guid>
      <description>&lt;p&gt;&#xA;I think I&#39;ve been really lucky lately. In my new job I&#39;m getting to work with many interesting things and &lt;a href=&#34;http://openid.net/&#34;&gt;OpenID&lt;/a&gt; is just one of them.&lt;br&gt;&lt;br&gt;We are investing high in Ruby on Rails and we have now a few internal applications in development stages. Our manager wanted the ability to let people log in to our rails applications(for now) using their OpenID accounts.&lt;br&gt;&lt;br&gt;It was a funny task, as I knew very little about OpenID. The idea actually is really good. Instead of creating a new user account on each new service/site you&#39;d like to subscribe to, you create a single user account in a OpenID provider - like &lt;a href=&#34;https://www.myopenid.com/&#34;&gt;MyOpenID&lt;/a&gt; - and use this identity to authenticate yourself in the services/sites that support this protocol.&lt;br&gt;&lt;br&gt;What do we earn from that? Well, in my opinion, we can get a couple of benefits:&lt;br&gt;&lt;br&gt;- You don&#39;t need to memorize 723 logins and 723 passwords (if you really care about creating different passwords for all of your user accounts)&lt;br&gt;&lt;br&gt;- You don&#39;t authenticate yourself to the service you&#39;re attempting to use. This service actually asks to your provider if your identity is valid, and you authenticate yourself there. Nowhere else.&lt;br&gt;&lt;br&gt;I strongly recommend you visit the &lt;a href=&#34;http://openid.net/&#34;&gt;OpenID&lt;/a&gt; to understand more about it.&lt;br&gt;&lt;br&gt;But, back to the problem, we needed to put it working in a rails app. And that&#39;s when I found the &lt;a href=&#34;http://openidenabled.com/ruby-openid/&#34;&gt;ruby-openid&lt;/a&gt; library, provided by &lt;a href=&#34;http://openidenabled.com/&#34;&gt;OpenID Enabled&lt;/a&gt;.&lt;br&gt;&lt;br&gt;It is a complete library, really well documented that provides an abstraction layer both for consumer and server applications.&lt;br&gt;&lt;br&gt;My first step was to develop the consumer. That&#39;s what you need if you are going to provide your users with OpenID authentication in your web site. The ruby-openid library comes with several samples that really helped me out here. They were developed using &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby On Rails&lt;/a&gt; and are a really good start point.&lt;br&gt;&lt;br&gt;After this step, I was asked to evaluate the possibility of being a OpenID provider. At first I thought it would be a really complicated task, but again this ruby library had a great example of a simple provider. The drawback is that the samples were developed in an older version of Rails ( &amp;lt; 2.x ) . So I had to freeze the Rails version to 1.2.5 so I could run the provider sample code.&lt;br&gt;&lt;br&gt;I am now working on porting this code to Rails 2.x, into one of our applications and it&#39;s been flowing well so far. Just wanted to share this library for those of you trying something similar. It is really worth a look.&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails 20 xml data type and db2</title>
      <link>http://leonardoborges.com/writings/2008/01/02/rails-20-xml-data-type-and-db2/</link>
      <pubDate>Wed, 02 Jan 2008 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2008/01/02/rails-20-xml-data-type-and-db2/</guid>
      <description>&lt;p&gt;&#xA;&lt;strong&gt;[2008/04/30] Update:&lt;/strong&gt; The ibm_db gem has been updated to support the new Rails 2.0 style migration. Now you can just use t.xml and it will work. Look &lt;a href=&#34;http://rubyforge.org/forum/forum.php?forum_id=24055&#34;&gt;here&lt;/a&gt; for more info. Thanks to Mario Briggs for pointing me to the update.&lt;br&gt;&lt;br&gt;---&lt;br&gt;&lt;br&gt;In my new job we work with XML data natively stored on DB2. I have done some test with Rails and DB2 a few weeks ago and it&#39;s pretty interesting, specially the easiness that Rails deals with XML.&lt;br&gt;&lt;br&gt;We decided to test some new features of DB2 9.5 and I decided to test them with Rails 2.0.&lt;br&gt;&lt;br&gt;So I created a new Rails app, configured the database.yml to use the &lt;a href=&#34;http://db2onrails.com/2007/10/17/ibm_db-gem-updated-to-090/&#34;&gt;idm_db&lt;/a&gt; gem and fired:&lt;br&gt;&lt;br&gt;&lt;code&gt;$ rake db:create&lt;/code&gt;&lt;br&gt;&lt;br&gt;The output is nice but, the database isn&#39;t there! I suppose it&#39;s something with the gem that needs to be updated. But really don&#39;t know about it. It just doesn&#39;t work. But this will not hold us down. I will just create the database by hand and keep going with my tests.&lt;br&gt;&lt;br&gt;After that, I created a new model &lt;em&gt;XmlDocument,&lt;/em&gt; which has a column named &lt;em&gt;data&lt;/em&gt;, of type XML. According to the new migrations syntax, my model&#39;s migration would look something similar with this:&lt;br&gt;&lt;br&gt;&lt;code&gt;class CreateXmlDocuments &amp;lt; ActiveRecord::Migration&lt;br&gt;def self.up&lt;br&gt;create_table :xml_documents do |t|&lt;br&gt;t.xml :data&lt;br&gt;t.timestamps&lt;br&gt;end&lt;br&gt;end&lt;/code&gt;&lt;br&gt;&lt;br&gt;def self.down&lt;br&gt;drop_table :xml_documents&lt;br&gt;end&lt;br&gt;end&lt;br&gt;&lt;br&gt;Right? Ok, I fired up a terminal and lauched:&lt;br&gt;&lt;br&gt;&lt;code&gt;$ rake db:migrate&lt;/code&gt;&lt;br&gt;&lt;br&gt;The output? Here it is:&lt;br&gt;&lt;br&gt;&lt;code&gt;== 3 CreateXmlDocuments: migrating ============================================&lt;br&gt;-- create_table(:xml_documents)&lt;br&gt;rake aborted!&lt;br&gt;undefined method `xml&#39; for #&lt;br&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;Yes, a big nice exception! The new migration syntax doesn&#39;t allow you to do &lt;em&gt;t.xml&lt;/em&gt;! But please don&#39;t ask me why! :p&lt;br&gt;The solution? Well, although it&#39;s weird - imo - , it&#39;s also easy. You can mix the new and the old syntax in the same file. So our model&#39;s  migration  will now look like this:&lt;br&gt;&lt;br&gt;&lt;code&gt;class CreateXmlDocuments &amp;lt; ActiveRecord::Migration&lt;br&gt;def self.up&lt;br&gt;create_table :xml_documents do |t|&lt;br&gt;t.column  :data, :xml&lt;br&gt;t.timestamps&lt;br&gt;end&lt;br&gt;end&lt;/code&gt;&lt;br&gt;&lt;br&gt;def self.down&lt;br&gt;drop_table :xml_documents&lt;br&gt;end&lt;br&gt;end&lt;br&gt;&lt;br&gt;And that&#39;s it! We&#39;re ready to go! I didn&#39;t find anything else different so far, besides what I described here. Hope this helps!&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rails 20 scaffold</title>
      <link>http://leonardoborges.com/writings/2007/12/21/rails-20-scaffold/</link>
      <pubDate>Fri, 21 Dec 2007 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2007/12/21/rails-20-scaffold/</guid>
      <description>&lt;p&gt;&#xA;Following the Rails 2.0 hype, I&#39;ve been playing around with it and decided to share a first impression: Scaffolding is gone!&lt;br&gt;&lt;br&gt;But wait, before you knock your head against the wall, let me tell you something: I lied :)&lt;br&gt;&lt;br&gt;Scaffolding is not really gone. It&#39;s just changed a bit.&lt;br&gt;&lt;br&gt;How can I tell? Well, as a good developer I thought: &#34;I&#39;ll just create a scaffold with the new version and see what&#39;s different&#34;&lt;br&gt;&lt;br&gt;I fired up a terminal, created a news rails application and generated a new model:&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;$ script/generate model Contact name:string email:string&lt;/code&gt;&lt;/strong&gt; - yes you can do this in rails 2.0, and these fields get into your model&#39;s migration!&lt;br&gt;&lt;br&gt;Now the I have a new model, it&#39;s time for a controller to manage it:&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;$ script/generate controller Contacts&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;So your controller would look something like this huh?&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;class ContactsController &amp;lt; ApplicationController&lt;br&gt;scaffold :contact&lt;br&gt;end&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Well, too bad! The method scaffold is gone from ActionController::Base! And I&#39;m not lying this time!&lt;br&gt;&lt;br&gt;Now that the dynamic scaffold is gone, we&#39;re left with the static one.&lt;br&gt;Ok, let&#39;s try it then:&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;$ script/generate scaffold contact&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;And it won&#39;t work again! ;) At the end of the output, you will get something like this:&lt;br&gt;&lt;br&gt;&lt;code&gt;Another migration is already named create_contacts: db/migrate/001_create_contacts.rb&lt;/code&gt;&lt;br&gt;&lt;br&gt;It really means that if your model is meant to be used by a scaffold, you better generate it in the same line. It will fail, afaik, if the model previously existed. Destroy yout model and controller, and execute the following:&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;code&gt;$ script/generate scaffold Contact name:string email:string&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Done! Just run your migrations, startup your server and your new scaffold in rails 2.0 will be working gracefully!&lt;br&gt;&lt;br&gt;It took me a while to discover this changes because I didn&#39;t find it well documented. But maybe I was not looking in the right places. :)&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rubyworks production stack for rails</title>
      <link>http://leonardoborges.com/writings/2007/12/01/rubyworks-production-stack-for-rails/</link>
      <pubDate>Sat, 01 Dec 2007 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2007/12/01/rubyworks-production-stack-for-rails/</guid>
      <description>&lt;p&gt;&#xA;Well, we all know how hard, or at least cumbersome, it can be to set up a production environment to deploy your applications. Besides all the hardware stuff like storages, links, routers you are still left with a huge amount of software configuration to handle. This often includes configuring things like clusters, load balancing and services monitoring - Including notification of interested parts in case of any failure. Pieces of software you have to tie up and make them work together.&lt;br&gt;&lt;br&gt;But hey, ruby lovers, you may have a better way to get this going! Released by &lt;a href=&#34;http://www.thoughtworks.com/&#34; title=&#34;TW&#39;s web site&#34;&gt;ThoughtWorks&lt;/a&gt;, &lt;a href=&#34;http://studios.thoughtworks.com/rubyworks&#34; title=&#34;RubyWorks&#34;&gt;RubyWorks&lt;/a&gt; is, as quoted from their website, a production application stack for &lt;a href=&#34;http://www.rubyonrails.org/&#34; title=&#34;Ruby On Rails&#34;&gt;Ruby On Rails&lt;/a&gt; applications. I decided to give it a try and I really enjoyed it.&lt;br&gt;&lt;br&gt;First of all I didn&#39;t want to mess with my actual configuration so I installed a new vm with &lt;a href=&#34;http://www.virtualbox.org/&#34; title=&#34;Virtual Box&#34;&gt;Virtual Box&lt;/a&gt;. It has Ubuntu 7.10 on it, with 256MB of memory.&lt;br&gt;&lt;br&gt;After installing RubyWorks - instructions on their website -, you get a new skeleton rails app up and running, being served by 4 &lt;a href=&#34;http://mongrel.rubyforge.org/&#34; title=&#34;Mongrel&#34;&gt;mongrels&lt;/a&gt; that defaults to production environment! Impressed? There is more. A &lt;a href=&#34;http://haproxy.1wt.eu/&#34; title=&#34;HAProxy&#34;&gt;HAProxy&lt;/a&gt; is also set up in front of your mongrel servers acting as a load balancer.&lt;br&gt;&lt;br&gt;Well, you probably want to monitor all that stuff huh? A &lt;a href=&#34;http://www.tildeslash.com/monit/&#34; title=&#34;Monit&#34;&gt;monit&lt;/a&gt; web interface is waiting for your call on port 2812! It monitors all your mongrel servers - four by default - and your HAProxy, allowing you to measure CPU and Memory usage, among other things.&lt;br&gt;&lt;br&gt;The coolest thing here is that all these softwares you would have to setup by hand are already working together, ready for production! Well, is it?&lt;br&gt;&lt;br&gt;Going a little deeper, I deployed a database backed application to test this stack&#39;s performance.&lt;br&gt;&lt;br&gt;I used &lt;a href=&#34;http://www.joedog.org/JoeDog/Siege&#34; title=&#34;Siege&#34;&gt;Siege&lt;/a&gt; to stress the app and I am very happy with the results! I compared it with a single mongrel running on production env and no proxy at all.&lt;br&gt;&lt;br&gt;It is worth mentioning that having 4 mongrels running took my vm to 77% of memory usage, while a single mongrel took it to 38%.&lt;br&gt;&lt;br&gt;</description>
    </item>
    <item>
      <title>ruby on db2 a linux nightmare with a happy end</title>
      <link>http://leonardoborges.com/writings/2007/11/20/ruby-on-db2-a-linux-nightmare-with-a-happy-end/</link>
      <pubDate>Tue, 20 Nov 2007 00:00:00 +0000</pubDate>
      <guid>http://leonardoborges.com/writings/2007/11/20/ruby-on-db2-a-linux-nightmare-with-a-happy-end/</guid>
      <description>&lt;p&gt;&#xA;Although the title might look dramatic, it&#39;s pretty close to what I&#39;ve been through.&lt;br&gt;&lt;br&gt;I have set up a Ubuntu 64 bits on my laptop last week to do some tests with Ruby and DB2. Oh man, it is not complicated, is it? It shouldn&#39;t be, actually.&lt;br&gt;&lt;br&gt;Too sad that I found &lt;a href=&#34;http://antoniocangiano.com/2007/11/14/guide-to-setting-up-the-ibm-ruby-and-python-drivers-for-db2-on-linux-32-or-64-bit/&#34; title=&#34;Antonio Cangiano&#39;s Blog&#34;&gt;this&lt;/a&gt; so late! It&#39;s a post from a friend, &lt;a href=&#34;http://antoniocangiano.com/&#34; title=&#34;Antonio Cangiano&#39;s Blog&#34;&gt;Antonio Cangiano&lt;/a&gt;, describing the most common problems you may find trying to set up this environment (Linux + Ruby + DB2). You will probably get it working the first time, if you read it &lt;strong&gt;word&lt;/strong&gt; by &lt;strong&gt;word&lt;/strong&gt;. But if not, here are some extra tips that I can share with you.&lt;br&gt;&lt;br&gt;- If you installed Ruby using your distribution&#39;s package manager, remove all ruby packages completely. After that, install ruby exactly as described in Antonio&#39;s &lt;a href=&#34;http://antoniocangiano.com/2007/11/14/guide-to-setting-up-the-ibm-ruby-and-python-drivers-for-db2-on-linux-32-or-64-bit/&#34;&gt;post&lt;/a&gt;, typing this in the console:&lt;br&gt;&lt;pre class=&#34;rubycode&#34;&gt;&lt;code&gt;$ sudo apt-get install build-essential&lt;br&gt;$ sudo apt-get install ruby-full rubygems&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;After that, you may try again.&lt;br&gt;&lt;br&gt;- Another problem I found was after getting the driver built. I have written a simple program to try the connection and got this message:&lt;br&gt;&lt;br&gt;&lt;strong&gt;Failed to load IBM_DB Ruby Driver&lt;/strong&gt;&lt;br&gt;&lt;br&gt;The thing is that this error really means it was not able to find the file libdb2.so.1 in the /usr/lib directory. Issuing this command may settle things for you - it will create the missing symbolic link:&lt;br&gt;&lt;pre class=&#34;rubycode&#34;&gt;&lt;code&gt;$ ln -s /opt/ibm/db2/V9.5/lib64/libdb2.so.1 /usr/lib&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;Good luck!&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
